"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _omit = _interopRequireDefault(require("../_util/omit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Column(props) {
  var restProps = (0, _omit["default"])(props, ["align", "children", "dataIndex", "filterMultiple", "filterPopoverProps", "filteredValue", "filters", "fixed", "getCellStyle", "onFilter", "onFilterVisibleChange", "onSort", "popover", "render", "resizable", "sortOrder", "title", "verticalAlign", "width"]);
  return React.createElement("div", restProps);
}

Column.propTypes = {
  align: _propTypes["default"].oneOf([null, "left", "center", "right"]),
  dataIndex: _propTypes["default"].string,
  filterMultiple: _propTypes["default"].bool,
  filterPopoverProps: _propTypes["default"].object,
  filteredValue: _propTypes["default"].array,
  filterVisible: _propTypes["default"].bool,
  filters: _propTypes["default"].array,
  fixed: _propTypes["default"].oneOf([null, false, true, "left", "right"]),
  getCellStyle: _propTypes["default"].func,
  onFilter: function onFilter(props) {
    var onFilter = props.onFilter,
        onSort = props.onSort;

    if (onFilter) {
      if (typeof onFilter !== "function") {
        return new Error("Invalid prop `onFilter` supplied to `Column`, expected `function`");
      }

      if (!!onFilter && !!onSort) {
        return new Error("Column: 筛选和排序功能不能同时使用");
      }
    }

    return null;
  },
  onFilterVisibleChange: _propTypes["default"].func,
  onSort: function onSort(props) {
    var onFilter = props.onFilter,
        onSort = props.onSort;

    if (onSort) {
      if (typeof onSort !== "function") {
        return new Error("Invalid prop `onSort` supplied to `Column`, expected `function`");
      }

      if (!!onFilter && !!onSort) {
        return new Error("Column: 筛选和排序功能不能同时使用");
      }
    }

    return null;
  },
  popover: _propTypes["default"].node,
  render: _propTypes["default"].func,
  resizable: _propTypes["default"].bool,
  sortOrder: _propTypes["default"].oneOf([null, "", "asc", "desc"]),
  title: _propTypes["default"].node.isRequired,
  verticalAlign: _propTypes["default"].oneOf([null, "top", "center", "bottom"]),
  width: function width(props) {
    var fixed = props.fixed,
        width = props.width;

    if (width) {
      if (typeof width !== "string" && typeof width !== "number") {
        return new Error("Invalid `width` supplied to `Column`, expected `string`|`number`.");
      }
    } else if (fixed) {
      return new Error("Column: fixed 列必须传入 width prop.");
    }

    return null;
  }
};
Column.defaultProps = {
  align: null,
  dataIndex: null,
  filterMultiple: false,
  filterPopoverProps: {},
  filteredValue: null,
  filterVisible: null,
  filters: null,
  fixed: null,
  getCellStyle: function getCellStyle() {},
  onFilter: null,
  onFilterVisibleChange: function onFilterVisibleChange() {},
  onSort: null,
  popover: null,
  render: null,
  resizable: null,
  sortOrder: null,
  verticalAlign: null,
  width: null
};
var _default = Column;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,