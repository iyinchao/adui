"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDayInRange = exports.clone = exports.convertDateRangeToString = exports.convertDateToString = exports.isLegalDateRangeString = exports.isLegalDateString = exports.areSameDay = exports.areSameMonth = exports.getDefaultMinDate = exports.getDefaultMaxDate = exports.WEEKDAYS_SHORT_EN = exports.WEEKDAYS_LONG_EN = exports.MONTHS_EN = exports.WEEKDAYS_SHORT = exports.WEEKDAYS_LONG = exports.MONTHS = void 0;

var _dayPickerReact = require("day-picker-react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var MONTHS = ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"];
exports.MONTHS = MONTHS;
var WEEKDAYS_LONG = ["周日", "周一", "周二", "周三", "周四", "周五", "周六"];
exports.WEEKDAYS_LONG = WEEKDAYS_LONG;
var WEEKDAYS_SHORT = ["日", "一", "二", "三", "四", "五", "六"];
exports.WEEKDAYS_SHORT = WEEKDAYS_SHORT;
var MONTHS_EN = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
exports.MONTHS_EN = MONTHS_EN;
var WEEKDAYS_LONG_EN = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
exports.WEEKDAYS_LONG_EN = WEEKDAYS_LONG_EN;
var WEEKDAYS_SHORT_EN = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
exports.WEEKDAYS_SHORT_EN = WEEKDAYS_SHORT_EN;

var getDefaultMaxDate = function getDefaultMaxDate() {
  var date = new Date();
  date.setFullYear(date.getFullYear() + 1);
  date.setMonth(11, 31);
  return date;
};

exports.getDefaultMaxDate = getDefaultMaxDate;

var getDefaultMinDate = function getDefaultMinDate() {
  var date = new Date();
  date.setFullYear(date.getFullYear() - 4);
  date.setMonth(0, 1);
  return date;
};

exports.getDefaultMinDate = getDefaultMinDate;

var areSameMonth = function areSameMonth(date1, date2) {
  return date1 != null && date2 != null && date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();
};

exports.areSameMonth = areSameMonth;

var areSameDay = function areSameDay(date1, date2) {
  return areSameMonth(date1, date2) && date1.getDate() === date2.getDate();
};

exports.areSameDay = areSameDay;

var isLegalDateString = function isLegalDateString(date) {
  if (date.trim() === "") {
    return true;
  }

  var strings = date.split("-");

  if (strings.length === 3 && strings[0].length === 4 && strings[1].length === 2 && strings[2].length === 2 && !isNaN(Number(strings[0])) && !isNaN(Number(strings[1])) && !isNaN(Number(strings[2]))) {
    var checkLeapYear = function checkLeapYear(str) {
      return str % 4 === 0 && str % 100 !== 0 || str % 400 === 0;
    };

    var solar = [1, 3, 5, 7, 8, 10, 12];
    var lunar = [4, 6, 9, 11];
    var year = parseInt(strings[0], 10);
    var month = parseInt(strings[1], 10);
    var day = parseInt(strings[2], 10);

    if (month > 0 && month < 13) {
      if (solar.includes(month)) {
        if (day > 0 && day < 32) {
          return true;
        }
      } else if (lunar.includes(month)) {
        if (day > 0 && day < 31) {
          return true;
        }
      } else {
        if (checkLeapYear(year) && day > 0 && day < 30) {
          return true;
        }

        if (!checkLeapYear(year) && day > 0 && day < 29) {
          return true;
        }
      }
    }

    return false;
  }

  return false;
};

exports.isLegalDateString = isLegalDateString;

var isLegalDateRangeString = function isLegalDateRangeString(date) {
  if (date.trim() === "") {
    return true;
  }

  var strings = date.split(" - ");
  return strings.length === 2 && strings[0].length && strings[1].length && isLegalDateString(strings[0]) && isLegalDateString(strings[1]);
};

exports.isLegalDateRangeString = isLegalDateRangeString;

var convertDateToString = function convertDateToString(date) {
  if (!date) {
    return "";
  }

  var year = "";
  var month = "";
  var day = "";

  try {
    ;

    var _date$toLocaleDateStr = date.toLocaleDateString("zh-Hans-CN").split("/");

    var _date$toLocaleDateStr2 = _slicedToArray(_date$toLocaleDateStr, 3);

    year = _date$toLocaleDateStr2[0];
    month = _date$toLocaleDateStr2[1];
    day = _date$toLocaleDateStr2[2];
  } catch (error) {
    ;

    var _date$toLocaleDateStr3 = date.toLocaleDateString("en-US").split("/");

    var _date$toLocaleDateStr4 = _slicedToArray(_date$toLocaleDateStr3, 3);

    month = _date$toLocaleDateStr4[0];
    day = _date$toLocaleDateStr4[1];
    year = _date$toLocaleDateStr4[2];
  }

  var addZero = function addZero(s) {
    if (parseInt(s, 10) < 10) {
      return "0".concat(s);
    }

    return s;
  };

  return "".concat(year, "-").concat(addZero(month), "-").concat(addZero(day));
};

exports.convertDateToString = convertDateToString;

var convertDateRangeToString = function convertDateRangeToString(range) {
  if (!range) {
    return "";
  }

  var from = range[0];
  var to = range[1];

  if (!(from && to)) {
    return "";
  }

  if (_dayPickerReact.DateUtils.isDayAfter(to, from)) {
    return "".concat(convertDateToString(from), " - ").concat(convertDateToString(to));
  }

  return "".concat(convertDateToString(to), " - ").concat(convertDateToString(from));
};

exports.convertDateRangeToString = convertDateRangeToString;

var clone = function clone(d) {
  return d ? new Date(d.getTime()) : null;
};

exports.clone = clone;

var isDayInRange = function isDayInRange(date, dateRange) {
  var exclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (date === null || dateRange[0] === null || dateRange[1] === null) {
    return false;
  }

  var day = clone(date);
  var start = clone(dateRange[0]);
  var end = clone(dateRange[1]);

  if (day) {
    day.setHours(0, 0, 0, 0);
  }

  if (start) {
    start.setHours(0, 0, 0, 0);
  }

  if (end) {
    end.setHours(0, 0, 0, 0);
  }

  return start && day && end ? start <= day && day <= end && (!exclusive || !areSameDay(start, day) && !areSameDay(day, end)) : null;
};

exports.isDayInRange = isDayInRange;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,