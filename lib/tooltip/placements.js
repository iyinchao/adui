"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _builtinPlacements = require("../pop-trigger/builtinPlacements");

var targetOffset = [0, 0];
var arrowWidth = 5;
var horizontalArrowShift = 16;
var verticalArrowShift = 8;
var placements = {
  bottom: {
    offset: [0, 2],
    points: ["tc", "bc"],
    targetOffset: targetOffset
  },
  bottomLeft: {
    offset: [-(horizontalArrowShift + arrowWidth), 2],
    points: ["tl", "bc"],
    targetOffset: targetOffset
  },
  bottomRight: {
    offset: [horizontalArrowShift + arrowWidth, 2],
    points: ["tr", "bc"],
    targetOffset: targetOffset
  },
  left: {
    offset: [-2, 0],
    points: ["cr", "cl"],
    targetOffset: targetOffset
  },
  leftBottom: {
    offset: [-2, verticalArrowShift + arrowWidth],
    points: ["br", "cl"],
    targetOffset: targetOffset
  },
  leftTop: {
    offset: [-2, -(verticalArrowShift + arrowWidth)],
    points: ["tr", "cl"],
    targetOffset: targetOffset
  },
  right: {
    offset: [2, 0],
    points: ["cl", "cr"],
    targetOffset: targetOffset
  },
  rightBottom: {
    offset: [2, verticalArrowShift + arrowWidth],
    points: ["bl", "cr"],
    targetOffset: targetOffset
  },
  rightTop: {
    offset: [2, -(verticalArrowShift + arrowWidth)],
    points: ["tl", "cr"],
    targetOffset: targetOffset
  },
  top: {
    offset: [0, -2],
    points: ["bc", "tc"],
    targetOffset: targetOffset
  },
  topLeft: {
    offset: [-(horizontalArrowShift + arrowWidth), -2],
    points: ["bl", "tc"],
    targetOffset: targetOffset
  },
  topRight: {
    offset: [horizontalArrowShift + arrowWidth, -2],
    points: ["br", "tc"],
    targetOffset: targetOffset
  }
};

var getPlacements = function getPlacements(options) {
  var toReturn = options && options.alignEdge ? _builtinPlacements.builtinPlacements : placements;

  if (options && options.autoAdjustPlacement) {
    toReturn.overflow = {
      adjustX: 1,
      adjustY: 1
    };
  } else {
    toReturn.overflow = {
      adjustX: 0,
      adjustY: 0
    };
  }

  return toReturn;
};

var _default = getPlacements;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvdG9vbHRpcC9wbGFjZW1lbnRzLnRzIl0sIm5hbWVzIjpbInRhcmdldE9mZnNldCIsImFycm93V2lkdGgiLCJob3Jpem9udGFsQXJyb3dTaGlmdCIsInZlcnRpY2FsQXJyb3dTaGlmdCIsInBsYWNlbWVudHMiLCJib3R0b20iLCJvZmZzZXQiLCJwb2ludHMiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJsZWZ0IiwibGVmdEJvdHRvbSIsImxlZnRUb3AiLCJyaWdodCIsInJpZ2h0Qm90dG9tIiwicmlnaHRUb3AiLCJ0b3AiLCJ0b3BMZWZ0IiwidG9wUmlnaHQiLCJnZXRQbGFjZW1lbnRzIiwib3B0aW9ucyIsInRvUmV0dXJuIiwiYWxpZ25FZGdlIiwiYnVpbHRpblBsYWNlbWVudHMiLCJhdXRvQWRqdXN0UGxhY2VtZW50Iiwib3ZlcmZsb3ciLCJhZGp1c3RYIiwiYWRqdXN0WSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BOztBQU9BLElBQU1BLFlBQVksR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLENBQXJCO0FBQ0EsSUFBTUMsVUFBVSxHQUFHLENBQW5CO0FBQ0EsSUFBTUMsb0JBQW9CLEdBQUcsRUFBN0I7QUFDQSxJQUFNQyxrQkFBa0IsR0FBRyxDQUEzQjtBQUVBLElBQU1DLFVBQVUsR0FBRztBQUNqQkMsRUFBQUEsTUFBTSxFQUFFO0FBQ05DLElBQUFBLE1BQU0sRUFBRSxDQUFDLENBQUQsRUFBSSxDQUFKLENBREY7QUFFTkMsSUFBQUEsTUFBTSxFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FGRjtBQUdOUCxJQUFBQSxZQUFZLEVBQVpBO0FBSE0sR0FEUztBQU1qQlEsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZGLElBQUFBLE1BQU0sRUFBRSxDQUFDLEVBQUVKLG9CQUFvQixHQUFHRCxVQUF6QixDQUFELEVBQXVDLENBQXZDLENBREU7QUFFVk0sSUFBQUEsTUFBTSxFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FGRTtB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LEdBQ2pCRCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsU0FBbkIsR0FBK0JDLG9DQUEvQixHQUFtRG5CLFVBRHJEOztBQUdBLE1BQUlnQixPQUFPLElBQUlBLE9BQU8sQ0FBQ0ksbUJBQXZCLEVBQTRDO0FBQzFDSCxJQUFBQSxRQUFRLENBQUNJLFFBQVQsR0FBb0I7QUFDbEJDLE1BQUFBLE9BQU8sRUFBRSxDQURTO0FBRWxCQyxNQUFBQSxPQUFPLEVBQUU7QUFGUyxLQUFwQjtBQUlELEdBTEQsTUFLTztBQUNMTixJQUFBQSxRQUFRLENBQUNJLFFBQVQsR0FBb0I7QUFDbEJDLE1BQUFBLE9BQU8sRUFBRSxDQURTO0FBRWxCQyxNQUFBQSxPQUFPLEVBQUU7QUFGUyxLQUFwQjtBQUlEOztBQUNELFNBQU9OLFFBQVA7QUFDRCxDQWhCRDs7ZUFrQmVGLGEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRvb2x0aXAgcGxhY2VtZW50IOS4jiBQb3BUcmlnZ2VyIGJ1aWx0aW5QbGFjZW1lbnRzIOeahOWMuuWIq++8mlxuICpcbiAqIFBvcFRyaWdnZXIg6buY6K6k5oyH5a6a55qE5piv5by55Ye65qGG55qE6L6557yY5LiO5YWD57Sg55qE6L6557yY5a+56b2Q77ybXG4gKiBUb29sdGlwIOWkp+mDqOWIhuaDheWGteS4jemcgOimgei+uee8mOWvuem9kO+8jOmcgOimgeeahOaYr+W8ueWHuuahhueahOeureWktOaMh+WQkeWFg+e0oOato+S4remXtOOAglxuICog6ICM5Z+65LqOIFRvb2x0aXAg5bCB6KOF55qEIFBvcG92ZXIg6buY6K6k5L2/55So6L6557yY5a+56b2Q77yM5b2T54S25Lmf5Y+v6YCa6L+HIHByb3Ag5pS55Y+Y5q2k54m55oCn44CCXG4gKi9cbmltcG9ydCB7IGJ1aWx0aW5QbGFjZW1lbnRzIH0gZnJvbSBcIi4uL3BvcC10cmlnZ2VyL2J1aWx0aW5QbGFjZW1lbnRzXCJcblxuaW50ZXJmYWNlIElQbGFjZW1lbnRPcHRpb24ge1xuICBhbGlnbkVkZ2U/OiBib29sZWFuXG4gIGF1dG9BZGp1c3RQbGFjZW1lbnQ/OiBib29sZWFuXG59XG5cbmNvbnN0IHRhcmdldE9mZnNldCA9IFswLCAwXVxuY29uc3QgYXJyb3dXaWR0aCA9IDVcbmNvbnN0IGhvcml6b250YWxBcnJvd1NoaWZ0ID0gMTZcbmNvbnN0IHZlcnRpY2FsQXJyb3dTaGlmdCA9IDhcblxuY29uc3QgcGxhY2VtZW50cyA9IHtcbiAgYm90dG9tOiB7XG4gICAgb2Zmc2V0OiBbMCwgMl0sXG4gICAgcG9pbnRzOiBbXCJ0Y1wiLCBcImJjXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgYm90dG9tTGVmdDoge1xuICAgIG9mZnNldDogWy0oaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKSwgMl0sXG4gICAgcG9pbnRzOiBbXCJ0bFwiLCBcImJjXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgYm90dG9tUmlnaHQ6IHtcbiAgICBvZmZzZXQ6IFtob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgsIDJdLFxuICAgIHBvaW50czogW1widHJcIiwgXCJiY1wiXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIGxlZnQ6IHtcbiAgICBvZmZzZXQ6IFstMiwgMF0sXG4gICAgcG9pbnRzOiBbXCJjclwiLCBcImNsXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgbGVmdEJvdHRvbToge1xuICAgIG9mZnNldDogWy0yLCB2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoXSxcbiAgICBwb2ludHM6IFtcImJyXCIsIFwiY2xcIl0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICBsZWZ0VG9wOiB7XG4gICAgb2Zmc2V0OiBbLTIsIC0odmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCldLFxuICAgIHBvaW50czogW1widHJcIiwgXCJjbFwiXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIHJpZ2h0OiB7XG4gICAgb2Zmc2V0OiBbMiwgMF0sXG4gICAgcG9pbnRzOiBbXCJjbFwiLCBcImNyXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgcmlnaHRCb3R0b206IHtcbiAgICBvZmZzZXQ6IFsyLCB2ZXJ0aWNhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoXSxcbiAgICBwb2ludHM6IFtcImJsXCIsIFwiY3JcIl0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICByaWdodFRvcDoge1xuICAgIG9mZnNldDogWzIsIC0odmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCldLFxuICAgIHBvaW50czogW1widGxcIiwgXCJjclwiXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIHRvcDoge1xuICAgIG9mZnNldDogWzAsIC0yXSxcbiAgICBwb2ludHM6IFtcImJjXCIsIFwidGNcIl0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICB0b3BMZWZ0OiB7XG4gICAgb2Zmc2V0OiBbLShob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpLCAtMl0sXG4gICAgcG9pbnRzOiBbXCJibFwiLCBcInRjXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgdG9wUmlnaHQ6IHtcbiAgICBvZmZzZXQ6IFtob3Jpem9udGFsQXJyb3dTaGlmdCArIGFycm93V2lkdGgsIC0yXSxcbiAgICBwb2ludHM6IFtcImJyXCIsIFwidGNcIl0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxufVxuXG5jb25zdCBnZXRQbGFjZW1lbnRzID0gKG9wdGlvbnM6IElQbGFjZW1lbnRPcHRpb24pID0+IHtcbiAgY29uc3QgdG9SZXR1cm46IGFueSA9XG4gICAgb3B0aW9ucyAmJiBvcHRpb25zLmFsaWduRWRnZSA/IGJ1aWx0aW5QbGFjZW1lbnRzIDogcGxhY2VtZW50c1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYXV0b0FkanVzdFBsYWNlbWVudCkge1xuICAgIHRvUmV0dXJuLm92ZXJmbG93ID0ge1xuICAgICAgYWRqdXN0WDogMSxcbiAgICAgIGFkanVzdFk6IDEsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvUmV0dXJuLm92ZXJmbG93ID0ge1xuICAgICAgYWRqdXN0WDogMCxcbiAgICAgIGFkanVzdFk6IDAsXG4gICAgfVxuICB9XG4gIHJldHVybiB0b1JldHVyblxufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRQbGFjZW1lbnRzXG4iXX0=