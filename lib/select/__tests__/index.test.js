"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var React = _interopRequireWildcard(require("react"));

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Option = _["default"].Option;
describe("Select", function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it("Select 是否正确渲染", function () {
    var wrapper = (0, _enzyme.mount)(React.createElement(_["default"], null));
    expect(wrapper).toMatchSnapshot();
  });
  it("Select 是否能内部驱动", function () {
    var wrapper = (0, _enzyme.mount)(React.createElement(_["default"], {
      defaultOpen: true,
      defaultValue: 2,
      style: {
        width: "120px"
      }
    }, React.createElement(Option, {
      value: 1
    }, "\u670B\u53CB\u5708"), React.createElement(Option, {
      value: 2
    }, "\u516C\u4F17\u53F7")));
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find("Trigger").instance().getComponent());
    expect(dropdownWrapper.props().visible).toBe(true);
    dropdownWrapper.find(".adui-select-item-option").at(0).simulate("click");
    dropdownWrapper = (0, _enzyme.mount)(wrapper.find("Trigger").instance().getComponent());
    expect(wrapper.state().value).toBe(1);
    expect(dropdownWrapper.props().visible).toBe(false);
  });
  it("Select 是否受外部控制", function () {
    var onSelect = jest.fn();
    var wrapper = (0, _enzyme.mount)(React.createElement(_["default"], {
      open: true,
      value: 2,
      style: {
        width: "120px"
      },
      onSelect: onSelect
    }, React.createElement(Option, {
      value: 1
    }, "\u670B\u53CB\u5708"), React.createElement(Option, {
      value: 2
    }, "\u516C\u4F17\u53F7")));
    var dropdownWrapper = (0, _enzyme.mount)(wrapper.find("Trigger").instance().getComponent());
    expect(wrapper.state().value).toBe(2);
    expect(dropdownWrapper.props().visible).toBe(true);
    dropdownWrapper.find(".adui-select-item-option").at(0).simulate("click");
    dropdownWrapper = (0, _enzyme.mount)(wrapper.find("Trigger").instance().getComponent());
    expect(wrapper.state().value).toBe(2);
    expect(dropdownWrapper.props().visible).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,