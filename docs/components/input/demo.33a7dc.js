(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{1683:function(n,a,s){n.exports={cleave:s(1742),limit:s(1743),textarea:s(1744)}},1742:function(n,a){n.exports={content:["article",["p","输入内容格式（",["a",{title:null,href:"https://github.com/nosir/cleave.js"},"cleave.js"],"）"],["pre",{lang:"jsx",highlighted:'  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      date<span class="token punctuation">:</span> <span class="token string">"2019-01-21"</span><span class="token punctuation">,</span>\n      password<span class="token punctuation">:</span> <span class="token string">"1234567"</span><span class="token punctuation">,</span>\n      phone<span class="token punctuation">:</span> <span class="token string">"135 0123 4567"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> date<span class="token punctuation">,</span> password<span class="token punctuation">,</span> phone <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>\n        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>date<span class="token punctuation">}</span></span>\n        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> date <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token attr-name">)</span> <span class="token attr-name">=</span><span class="token punctuation">></span> <span class="token attr-name">this.setState({</span> <span class="token attr-name">date</span> <span class="token attr-name">})}</span>\n        <span class="token attr-name">cleaveOptions</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n          delimiter<span class="token punctuation">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span>\n          blocks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginRight<span class="token punctuation">:</span> <span class="token string">"16px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>\n        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>phone<span class="token punctuation">}</span></span>\n        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> phone <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token attr-name">)</span> <span class="token attr-name">=</span><span class="token punctuation">></span> <span class="token attr-name">this.setState({</span> <span class="token attr-name">phone</span> <span class="token attr-name">})}</span>\n        <span class="token attr-name">cleaveOptions</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n          blocks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginRight<span class="token punctuation">:</span> <span class="token string">"16px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span><span class="token punctuation">,</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>\n        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>password<span class="token punctuation">}</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span>\n        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> password <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token attr-name">)</span> <span class="token attr-name">=</span><span class="token punctuation">></span> <span class="token attr-name">this.setState({</span> <span class="token attr-name">password</span> <span class="token attr-name">})}</span>\n      <span class="token punctuation">/></span></span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>'},["code",'  constructor(props) {\n    super(props)\n\n    this.state = {\n      date: "2019-01-21",\n      password: "1234567",\n      phone: "135 0123 4567",\n    }\n  }\n\n  render () {\n    const { date, password, phone } = this.state\n    return ([\n      <Input\n        key={0}\n        value={date}\n        onChange={({ target: { value: date } }) => this.setState({ date })}\n        cleaveOptions={{\n          delimiter: "-",\n          blocks: [4, 2, 2],\n        }}\n        style={{ marginRight: "16px" }}\n      />,\n      <Input\n        key={1}\n        value={phone}\n        onChange={({ target: { value: phone } }) => this.setState({ phone })}\n        cleaveOptions={{\n          blocks: [3, 4, 4],\n        }}\n        style={{ marginRight: "16px" }}\n      />,\n      <Input\n        key={2}\n        value={password}\n        type="password"\n        onChange={({ target: { value: password } }) => this.setState({ password })}\n      />\n    ])\n  }']],["h2","Alert"],["h3","关于 Cleave.js"],["p","利用 ",["code","cleaveOptions"]," 可以实现手机号、日期、数字及自定义格式。",["br"],"除此之外，还可通过 ",["code","cleaveOptions={{ uppercase: true }}"]," 开启英文字母大写的功能。"]],meta:{order:2,title:{"zh-CN":"输入内容格式","en-US":"Cleave"},filename:"components/input/demo/cleave.md"}}},1743:function(n,a){n.exports={content:["article",["p","字符数限制："],["pre",{lang:"jsx",highlighted:'  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      value<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> valueState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span>\n        <span class="token attr-name">limit</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token punctuation">:</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token attr-name">)</span> <span class="token attr-name">=</span><span class="token punctuation">></span> <span class="token attr-name">this.setState({</span> <span class="token attr-name">value</span> <span class="token attr-name">})}</span>\n        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>valueState<span class="token punctuation">}</span></span>\n        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token string">"28%"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>'},["code",'  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: "",\n    }\n  }\n\n  render () {\n    const { value: valueState } = this.state\n    return (\n      <Input\n        limit={10}\n        onChange={({ target: { value } }) => this.setState({ value })}\n        value={valueState}\n        style={{ width: "28%" }}\n      />\n    )\n  }']],["h2","Alert"],["h3","关于字符数限制"],["p","1.默认开启 ",["code","countHanzi"],"，一个汉字计算为 ",["strong","2"]," 字数，数字与英文计算为 ",["strong","1"]," 字数；你可以关闭此 Prop，那样所有字符都计算为 ",["strong","1"]," 字数；",["br"],"2.使用 ",["code","limit"]," Prop 时，",["code","Input"]," 必须是外部控制的（即传入 ",["code","value"]," ），否则 ",["code","defaultValue"]," 会直接传给原生 ",["code","<input />"]," 元素处理，在这样的设计下组件内部并没有存储当前的值，因此也没有办法去设置 ",["code","limit"]," 状态。  "]],meta:{order:0,title:{"zh-CN":"字数限制","en-US":"Limit"},filename:"components/input/demo/limit.md"}}},1744:function(n,a){n.exports={content:["article",["p","段落文本输入 ",["code","Input.Textarea"],"："],["pre",{lang:"jsx",highlighted:'  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      value<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> valueState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input.Textarea</span>\n        <span class="token attr-name">limit</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token punctuation">:</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token attr-name">)</span> <span class="token attr-name">=</span><span class="token punctuation">></span> <span class="token attr-name">this.setState({</span> <span class="token attr-name">value</span> <span class="token attr-name">})}</span>\n        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>valueState<span class="token punctuation">}</span></span>\n        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token string">"46%"</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token string">"120px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>'},["code",'  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: "",\n    }\n  }\n\n  render () {\n    const { value: valueState } = this.state\n    return (\n      <Input.Textarea\n        limit={15}\n        onChange={({ target: { value } }) => this.setState({ value })}\n        value={valueState}\n        style={{ width: "46%", height: "120px" }}\n      />\n    )\n  }']]],meta:{order:1,title:{"zh-CN":"段落文本","en-US":"Textarea"},filename:"components/input/demo/textarea.md"}}}}]);