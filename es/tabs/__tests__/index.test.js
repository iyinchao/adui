import * as React from "react";
import { act } from "react-dom/test-utils";
import TestRenderer from "react-test-renderer";
import { mount } from "enzyme";
import Tabs from "..";
var Tab = Tabs.Tab;
describe("Tabs", function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  it("验证快照", function () {
    var wrapper0 = TestRenderer.create(React.createElement(Tabs, {
      gutter: 10
    }, React.createElement(Tab, {
      title: "1",
      value: "1"
    })));
    var wrapper1 = TestRenderer.create(React.createElement(Tabs, null, "string"));
    expect(wrapper0).toMatchSnapshot();
    expect(wrapper1).toMatchSnapshot();
  });
  it("验证 setIndicatorStyle 快照", function () {
    var wrapper0 = mount(React.createElement(Tabs, {
      value: "2"
    }, React.createElement(Tab, {
      title: "1",
      value: "1"
    }), React.createElement(Tab, {
      title: "2",
      value: "2"
    })));
    var wrapper1 = mount(React.createElement(Tabs, null, React.createElement(Tab, {
      title: "1",
      value: "1"
    }), React.createElement(Tab, {
      title: "2",
      value: "2"
    })));
    act(function () {
      jest.advanceTimersByTime(0);
    });
    expect(wrapper0).toMatchSnapshot();
    expect(wrapper1).toMatchSnapshot();
  });
  it("是否能够内部驱动", function () {
    var wrapper = mount(React.createElement(Tabs, {
      defaultValue: "1"
    }, React.createElement(Tab, {
      title: "1",
      value: "1"
    }), React.createElement(Tab, {
      title: "2",
      value: "2"
    })));
    expect(wrapper.find("div").at(0).props()["data-value"]).toEqual("1");
    wrapper.find("[role='tab']").at(1).simulate("click");
    expect(wrapper.find("div").at(0).props()["data-value"]).toEqual("2");
  });
  it("是否能受外部控制", function () {
    var wrapper0 = mount(React.createElement(Tabs, {
      value: "1"
    }, React.createElement(Tab, {
      title: "1",
      value: "1"
    }), React.createElement(Tab, {
      title: "2",
      value: "2"
    })));
    expect(wrapper0.find("div").at(0).props()["data-value"]).toEqual("1");
    wrapper0.find("[role='tab']").at(1).simulate("click");
    expect(wrapper0.find("div").at(0).props()["data-value"]).toEqual("1");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbXBvbmVudHMvdGFicy9fX3Rlc3RzX18vaW5kZXgudGVzdC50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJhY3QiLCJUZXN0UmVuZGVyZXIiLCJtb3VudCIsIlRhYnMiLCJUYWIiLCJkZXNjcmliZSIsImJlZm9yZUFsbCIsImplc3QiLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJBbGwiLCJ1c2VSZWFsVGltZXJzIiwiaXQiLCJ3cmFwcGVyMCIsImNyZWF0ZSIsIndyYXBwZXIxIiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwiYWR2YW5jZVRpbWVyc0J5VGltZSIsIndyYXBwZXIiLCJmaW5kIiwiYXQiLCJwcm9wcyIsInRvRXF1YWwiLCJzaW11bGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLQSxLQUFaLE1BQXVCLE9BQXZCO0FBQ0EsU0FBU0MsR0FBVCxRQUFvQixzQkFBcEI7QUFDQSxPQUFPQyxZQUFQLE1BQXlCLHFCQUF6QjtBQUNBLFNBQVNDLEtBQVQsUUFBc0IsUUFBdEI7QUFDQSxPQUFPQyxJQUFQLE1BQWlCLElBQWpCO0lBRVFDLEcsR0FBUUQsSSxDQUFSQyxHO0FBRVJDLFFBQVEsQ0FBQyxNQUFELEVBQVMsWUFBTTtBQUNyQkMsRUFBQUEsU0FBUyxDQUFDLFlBQU07QUFDZEMsSUFBQUEsSUFBSSxDQUFDQyxhQUFMO0FBQ0QsR0FGUSxDQUFUO0FBSUFDLEVBQUFBLFFBQVEsQ0FBQyxZQUFNO0FBQ2JGLElBQUFBLElBQUksQ0FBQ0csYUFBTDtBQUNELEdBRk8sQ0FBUjtBQUlBQyxFQUFBQSxFQUFFLENBQUMsTUFBRCxFQUFTLFlBQU07QUFDZixRQUFNQyxRQUFRLEdBQUdYLFlBQVksQ0FBQ1ksTUFBYixDQUNmLG9CQUFDLElBQUQ7QUFBTSxNQUFBLE1BQU0sRUFBRTtBQUFkLE9BQ0Usb0JBQUMsR0FBRDtBQUFLLE1BQUEsS0FBSyxFQUFDLEdBQVg7QUFBZSxNQUFBLEtBQUssRUFBQztBQUFyQixNQURGLENBRGUsQ0FBakI7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TixDQUtFQyxPQUxGLENBS1UsR0FMVjtBQU1BVixJQUFBQSxRQUFRLENBQ0xPLElBREgsQ0FDUSxjQURSLEVBRUdDLEVBRkgsQ0FFTSxDQUZOLEVBR0dHLFFBSEgsQ0FHWSxPQUhaO0FBSUFSLElBQUFBLE1BQU0sQ0FDSkgsUUFBUSxDQUNMTyxJQURILENBQ1EsS0FEUixFQUVHQyxFQUZILENBRU0sQ0FGTixFQUdHQyxLQUhILEdBR1csWUFIWCxDQURJLENBQU4sQ0FLRUMsT0FMRixDQUtVLEdBTFY7QUFNRCxHQXZCQyxDQUFGO0FBd0JELENBMUZPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IHsgYWN0IH0gZnJvbSBcInJlYWN0LWRvbS90ZXN0LXV0aWxzXCJcbmltcG9ydCBUZXN0UmVuZGVyZXIgZnJvbSBcInJlYWN0LXRlc3QtcmVuZGVyZXJcIlxuaW1wb3J0IHsgbW91bnQgfSBmcm9tIFwiZW56eW1lXCJcbmltcG9ydCBUYWJzIGZyb20gXCIuLlwiXG5cbmNvbnN0IHsgVGFiIH0gPSBUYWJzXG5cbmRlc2NyaWJlKFwiVGFic1wiLCAoKSA9PiB7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgamVzdC51c2VGYWtlVGltZXJzKClcbiAgfSlcblxuICBhZnRlckFsbCgoKSA9PiB7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKClcbiAgfSlcblxuICBpdChcIumqjOivgeW/q+eFp1wiLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlcjAgPSBUZXN0UmVuZGVyZXIuY3JlYXRlKFxuICAgICAgPFRhYnMgZ3V0dGVyPXsxMH0+XG4gICAgICAgIDxUYWIgdGl0bGU9XCIxXCIgdmFsdWU9XCIxXCIgLz5cbiAgICAgIDwvVGFicz5cbiAgICApXG4gICAgY29uc3Qgd3JhcHBlcjEgPSBUZXN0UmVuZGVyZXIuY3JlYXRlKDxUYWJzPnN0cmluZzwvVGFicz4pXG4gICAgZXhwZWN0KHdyYXBwZXIwKS50b01hdGNoU25hcHNob3QoKVxuICAgIGV4cGVjdCh3cmFwcGVyMSkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICBpdChcIumqjOivgSBzZXRJbmRpY2F0b3JTdHlsZSDlv6vnhadcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIwID0gbW91bnQoXG4gICAgICA8VGFicyB2YWx1ZT1cIjJcIj5cbiAgICAgICAgPFRhYiB0aXRsZT1cIjFcIiB2YWx1ZT1cIjFcIiAvPlxuICAgICAgICA8VGFiIHRpdGxlPVwiMlwiIHZhbHVlPVwiMlwiIC8+XG4gICAgICA8L1RhYnM+XG4gICAgKVxuICAgIGNvbnN0IHdyYXBwZXIxID0gbW91bnQoXG4gICAgICA8VGFicz5cbiAgICAgICAgPFRhYiB0aXRsZT1cIjFcIiB2YWx1ZT1cIjFcIiAvPlxuICAgICAgICA8VGFiIHRpdGxlPVwiMlwiIHZhbHVlPVwiMlwiIC8+XG4gICAgICA8L1RhYnM+XG4gICAgKVxuICAgIGFjdCgoKSA9PiB7XG4gICAgICAvLyDnrYnlvoUgMG1z77yM6L+Z5qC35omN6IO96Kem5Y+RIHNldEluZGljYXRvclN0eWxlIOaWueazlVxuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDApXG4gICAgfSlcbiAgICBleHBlY3Qod3JhcHBlcjApLnRvTWF0Y2hTbmFwc2hvdCgpXG4gICAgZXhwZWN0KHdyYXBwZXIxKS50b01hdGNoU25hcHNob3QoKVxuICB9KVxuXG4gIGl0KFwi5piv5ZCm6IO95aSf5YaF6YOo6amx5YqoXCIsICgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoXG4gICAgICA8VGFicyBkZWZhdWx0VmFsdWU9XCIxXCI+XG4gICAgICAgIDxUYWIgdGl0bGU9XCIxXCIgdmFsdWU9XCIxXCIgLz5cbiAgICAgICAgPFRhYiB0aXRsZT1cIjJcIiB2YWx1ZT1cIjJcIiAvPlxuICAgICAgPC9UYWJzPlxuICAgIClcbiAgICBleHBlY3QoXG4gICAgICB3cmFwcGVyXG4gICAgICAgIC5maW5kKFwiZGl2XCIpXG4gICAgICAgIC5hdCgwKVxuICAgICAgICAucHJvcHMoKVtcImRhdGEtdmFsdWVcIl1cbiAgICApLnRvRXF1YWwoXCIxXCIpXG4gICAgd3JhcHBlclxuICAgICAgLmZpbmQoXCJbcm9sZT0ndGFiJ11cIilcbiAgICAgIC5hdCgxKVxuICAgICAgLnNpbXVsYXRlKFwiY2xpY2tcIilcbiAgICBleHBlY3QoXG4gICAgICB3cmFwcGVyXG4gICAgICAgIC5maW5kKFwiZGl2XCIpXG4gICAgICAgIC5hdCgwKVxuICAgICAgICAucHJvcHMoKVtcImRhdGEtdmFsdWVcIl1cbiAgICApLnRvRXF1YWwoXCIyXCIpXG4gIH0pXG5cbiAgaXQoXCLmmK/lkKbog73lj5flpJbpg6jmjqfliLZcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIwID0gbW91bnQoXG4gICAgICA8VGFicyB2YWx1ZT1cIjFcIj5cbiAgICAgICAgPFRhYiB0aXRsZT1cIjFcIiB2YWx1ZT1cIjFcIiAvPlxuICAgICAgICA8VGFiIHRpdGxlPVwiMlwiIHZhbHVlPVwiMlwiIC8+XG4gICAgICA8L1RhYnM+XG4gICAgKVxuICAgIGV4cGVjdChcbiAgICAgIHdyYXBwZXIwXG4gICAgICAgIC5maW5kKFwiZGl2XCIpXG4gICAgICAgIC5hdCgwKVxuICAgICAgICAucHJvcHMoKVtcImRhdGEtdmFsdWVcIl1cbiAgICApLnRvRXF1YWwoXCIxXCIpXG4gICAgd3JhcHBlcjBcbiAgICAgIC5maW5kKFwiW3JvbGU9J3RhYiddXCIpXG4gICAgICAuYXQoMSlcbiAgICAgIC5zaW11bGF0ZShcImNsaWNrXCIpXG4gICAgZXhwZWN0KFxuICAgICAgd3JhcHBlcjBcbiAgICAgICAgLmZpbmQoXCJkaXZcIilcbiAgICAgICAgLmF0KDApXG4gICAgICAgIC5wcm9wcygpW1wiZGF0YS12YWx1ZVwiXVxuICAgICkudG9FcXVhbChcIjFcIilcbiAgfSlcbn0pXG4iXX0=