import * as React from "react";
import { mount } from "enzyme";
import TestRenderer from "react-test-renderer";
import Radio from "..";
var Group = Radio.Group;
describe("Radio", function () {
  it("Group 是否正确渲染", function () {
    var wrapper = TestRenderer.create(React.createElement(Group, {
      size: "large"
    }, React.createElement(Radio, null, "children0"), React.createElement(Radio, null, "children1")));
    expect(wrapper).toMatchSnapshot();
  });
  it("Group 是否能内部驱动", function () {
    var onChange = jest.fn();
    var wrapper0 = mount(React.createElement(Group, {
      onChange: onChange
    }, React.createElement(Radio, null, "children0"), React.createElement(Radio, null, "children1")));
    var wrapper1 = mount(React.createElement(Group, {
      defaultValue: "children0",
      onChange: onChange
    }, React.createElement(Radio, null, "children0"), React.createElement(Radio, null, "children1")));
    wrapper0.find("label").at(0).simulate("click");
    expect(onChange).toHaveBeenCalledWith("children0");
    wrapper0.find("label").at(1).simulate("click");
    expect(onChange).toHaveBeenCalledWith("children1");
    expect(wrapper1.find("div").at(0).props()["data-value"]).toEqual("children0");
    wrapper1.find("label").at(1).simulate("click");
    expect(onChange).toHaveBeenCalledWith("children1");
  });
  it("Group 是否正确处理 value State", function () {
    var wrapper1 = mount(React.createElement(Group, {
      defaultValue: "children0"
    }, React.createElement(Radio, {
      disabled: true
    }, "children0"), React.createElement(Radio, {
      value: 27
    }, "children1"), React.createElement(Radio, {
      checked: true,
      value: 3
    }, "children2")));
    expect(wrapper1.find("div").at(0).props()["data-value"]).toEqual("children0");
    wrapper1.find("label").at(2).simulate("click");
    expect(wrapper1.find("div").at(0).props()["data-value"]).toEqual(3);
    var wrapper2 = mount(React.createElement(Group, {
      defaultValue: 123,
      value: 27
    }, React.createElement(Radio, {
      disabled: true,
      value: 123
    }, "children0"), React.createElement(Radio, {
      value: 27
    }, "children1"), React.createElement(Radio, {
      checked: true,
      value: 3
    }, "children2")));
    expect(wrapper2.find("div").at(0).props()["data-value"]).toEqual(27);
    wrapper2.find("label").at(2).simulate("click");
    expect(wrapper2.find("div").at(0).props()["data-value"]).toEqual(27);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NvbXBvbmVudHMvcmFkaW8vX190ZXN0c19fL2dyb3VwLnRlc3QudHN4Il0sIm5hbWVzIjpbIlJlYWN0IiwibW91bnQiLCJUZXN0UmVuZGVyZXIiLCJSYWRpbyIsIkdyb3VwIiwiZGVzY3JpYmUiLCJpdCIsIndyYXBwZXIiLCJjcmVhdGUiLCJleHBlY3QiLCJ0b01hdGNoU25hcHNob3QiLCJvbkNoYW5nZSIsImplc3QiLCJmbiIsIndyYXBwZXIwIiwid3JhcHBlcjEiLCJmaW5kIiwiYXQiLCJzaW11bGF0ZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwicHJvcHMiLCJ0b0VxdWFsIiwid3JhcHBlcjIiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBS0EsS0FBWixNQUF1QixPQUF2QjtBQUNBLFNBQVNDLEtBQVQsUUFBc0IsUUFBdEI7QUFDQSxPQUFPQyxZQUFQLE1BQXlCLHFCQUF6QjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsSUFBbEI7SUFFUUMsSyxHQUFVRCxLLENBQVZDLEs7QUFFUkMsUUFBUSxDQUFDLE9BQUQsRUFBVSxZQUFNO0FBQ3RCQyxFQUFBQSxFQUFFLENBQUMsY0FBRCxFQUFpQixZQUFNO0FBQ3ZCLFFBQU1DLE9BQU8sR0FBR0wsWUFBWSxDQUFDTSxNQUFiLENBQ2Qsb0JBQUMsS0FBRDtBQUFPLE1BQUEsSUFBSSxFQUFDO0FBQVosT0FDRSxvQkFBQyxLQUFELG9CQURGLEVBRUUsb0JBQUMsS0FBRCxvQkFGRixDQURjLENBQWhCO0FBTUFDLElBQUFBLE1BQU0sQ0FBQ0YsT0FBRCxDQUFOLENBQWdCRyxlQUFoQjtBQUNELEdBUkMsQ0FBRjtBQVVBSixFQUFBQSxFQUFFLENBQUMsZUFBRCxFQUFrQixZQUFNO0FBQ3hCLFFBQU1LLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxFQUFMLEVBQWpCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHYixLQUFLLENBQ3BCLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLFFBQVEsRUFBRVU7QUFBakIsT0FDRSxvQkFBQyxLQUFELG9CQURGLEVBRUUsb0JBQUMsS0FBRCxvQkFGRixDQURvQixDQUF0QjtBQU1BLFFBQU1JLFFBQVEsR0FBR2QsS0FBSyxDQUNwQixvQkFBQyxLQUFEO0FBQU8sTUFBQSxZQUFZLEVBQUMsV0FBcEI7QUFBZ0MsTUFBQSxRQUFRLEVBQUVVO0FBQTFDLE9BQ0Usb0JBQUMsS0FBRCxvQkFERixFQUVFLG9CQUFDLEtBQUQsb0JBRkYsQ0FEb0IsQ0FBdEI7QUFNQUcsSUFBQUEsUUFBUSxDQUFDRSxJQUFULENBQWMsT0FBZCxFQUF1QkMsRUFBdkIsQ0FBMEIsQ0FBMUIsRUFBNkJDLFFBQTdCLENBQXNDLE9BQXRDO0FBQ0FULElBQUFBLE1BQU0sQ0FBQ0UsUUFBRCxDQUFOLENBQWlCUSxvQkFBakIsQ0FBc0MsV0FBdEM7QUFDQUwsSUFBQUEsUUFBUSxDQUFDRSxJQUFULENBQWMsT0FBZCxFQUF1QkMsRUFBdkIsQ0FBMEIsQ0FBMUIsRUFBNkJDLFFBQTdCLENBQXNDLE9BQXRDO0FBQ0FULElBQUFBLE1BQU0sQ0FBQ0UsUUFBRCxDQUFOLENBQWlCUSxvQkFBakIsQ0FBc0MsV0FBdEM7QUFFQVYsSUFBQUEsTUFBTSxDQUFDTSxRQUFRLENBQUNDLElBQVQsQ0FBYyxLQUFkLEVBQXFCQyxFQUFyQixDQUF3QixDQUF4QixFQUEyQkcsS0FBM0IsR0FBbUMsWUFBbkMsQ0FBRCxDQUFOLENBQXlEQyxPQUF6RCxDQUNFLFdBREY7QUFHQU4sSUFBQUEsUUFBUSxDQUFDQyxJQUFULENBQWMsT0FBZCxFQUF1QkMsRUFBdkIsQ0FBMEIsQ0FBMUIsRUFBNkJDLFFBQTdCLENBQXNDLE9BQXRDO0FBQ0FULElBQUFBLE1BQU0sQ0FBQ0UsUUFBRCxDQUFOLENBQWlCUSxvQkFBakIsQ0FBc0MsV0FBdEM7QUFDRCxHQXhCQyxDQUFGO0FBMEJBYixFQUFBQSxFQUFFLENBQUMsMEJBQUQsRUFBNkIsWUFBTTtBQUVuQyxRQUFNUyxRQUFRLEdBQUdkLEtBQUssQ0FDcEIsb0JBQUMsS0FBRDtBQUFPLE1BQUEsWUFBWSxFQUFDO0FBQXBCLE9BQ0Usb0JBQUMsS0FBRDtBQUFPLE1BQUEsUUFBUTtBQUFmLG1CQURGLEVBRUUsb0JBQUMsS0FBRDtBQUFPLE1BQUEsS0FBSyxFQUFFO0FBQWQsbUJBRkYsRUFHRSxvQkFBQyxLQUFEO0FBQU8sTUFBQSxPQUFPLE1BQWQ7QUFBZSxNQUFBLEtBQUssRUFBRTtBQUF0QixtQkFIRixDQURvQixDQUF0QjtBQVNBUSxJQUFBQSxNQUFNLENBQUNNLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjLEtBQWQsRUFBcUJDLEVBQXJCLENBQXdCLENBQXhCLEVBQTJCRyxLQUEzQixHQUFtQyxZQUFuQyxDQUFELENBQU4sQ0FBeURDLE9BQXpELENBQ0UsV0FERjtBQUdBTixJQUFBQSxRQUFRLENBQUNDLElBQVQsQ0FBYyxPQUFkLEVBQXVCQyxFQUF2QixDQUEwQixDQUExQixFQUE2QkMsUUFBN0IsQ0FBc0MsT0FBdEM7QUFDQVQsSUFBQUEsTUFBTSxDQUFDTSxRQUFRLENBQUNDLElBQVQsQ0FBYyxLQUFkLEVBQXFCQyxFQUFyQixDQUF3QixDQUF4QixFQUEyQkcsS0FBM0IsR0FBbUMsWUFBbkMsQ0FBRCxDQUFOLENBQXlEQyxPQUF6RCxDQUFpRSxDQUFqRTtBQUdBLFFBQU1DLFFBQVEsR0FBR3JCLEtBQUssQ0FDcEIsb0JBQUMsS0FBRDtBQUFPLE1BQUEsWUFBWSxFQUFFLEdBQXJCO0FBQTBCLE1BQUEsS0FBSyxFQUFFO0FBQWpDLE9BQ0Usb0JBQUMsS0FBRDtBQUFPLE1BQUEsUUFBUSxNQUFmO0FBQWdCLE1BQUEsS0FBSyxFQUFFO0FBQXZCLG1CQURGLEVBSUUsb0JBQUMsS0FBRDtBQUFPLE1BQUEsS0FBSyxFQUFFO0FBQWQsbUJBSkYsRUFLRSxvQkFBQyxLQUFEO0FBQU8sTUFBQSxPQUFPLE1BQWQ7QUFBZSxNQUFBLEtBQUssRUFBRTtBQUF0QixtQkFMRixDQURvQixDQUF0QjtBQVdBUSxJQUFBQSxNQUFNLENBQUNhLFFBQVEsQ0FBQ04sSUFBVCxDQUFjLEtBQWQsRUFBcUJDLEVBQXJCLENBQXdCLENBQXhCLEVBQTJCRyxLQUEzQixHQUFtQyxZQUFuQyxDQUFELENBQU4sQ0FBeURDLE9BQXpELENBQWlFLEVBQWpFO0FBQ0FDLElBQUFBLFFBQVEsQ0FBQ04sSUFBVCxDQUFjLE9BQWQsRUFBdUJDLEVBQXZCLENBQTBCLENBQTFCLEVBQTZCQyxRQUE3QixDQUFzQyxPQUF0QztBQUNBVCxJQUFBQSxNQUFNLENBQUNhLFFBQVEsQ0FBQ04sSUFBVCxDQUFjLEtBQWQsRUFBcUJDLEVBQXJCLENBQXdCLENBQXhCLEVBQTJCRyxLQUEzQixHQUFtQyxZQUFuQyxDQUFELENBQU4sQ0FBeURDLE9BQXpELENBQWlFLEVBQWpFO0FBQ0QsR0FoQ0MsQ0FBRjtBQWlDRCxDQXRFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcbmltcG9ydCB7IG1vdW50IH0gZnJvbSBcImVuenltZVwiXG5pbXBvcnQgVGVzdFJlbmRlcmVyIGZyb20gXCJyZWFjdC10ZXN0LXJlbmRlcmVyXCJcbmltcG9ydCBSYWRpbyBmcm9tIFwiLi5cIlxuXG5jb25zdCB7IEdyb3VwIH0gPSBSYWRpb1xuXG5kZXNjcmliZShcIlJhZGlvXCIsICgpID0+IHtcbiAgaXQoXCJHcm91cCDmmK/lkKbmraPnoa7muLLmn5NcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBUZXN0UmVuZGVyZXIuY3JlYXRlKFxuICAgICAgPEdyb3VwIHNpemU9XCJsYXJnZVwiPlxuICAgICAgICA8UmFkaW8+Y2hpbGRyZW4wPC9SYWRpbz5cbiAgICAgICAgPFJhZGlvPmNoaWxkcmVuMTwvUmFkaW8+XG4gICAgICA8L0dyb3VwPlxuICAgIClcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcblxuICBpdChcIkdyb3VwIOaYr+WQpuiDveWGhemDqOmpseWKqFwiLCAoKSA9PiB7XG4gICAgY29uc3Qgb25DaGFuZ2UgPSBqZXN0LmZuKClcbiAgICBjb25zdCB3cmFwcGVyMCA9IG1vdW50KFxuICAgICAgPEdyb3VwIG9uQ2hhbmdlPXtvbkNoYW5nZX0+XG4gICAgICAgIDxSYWRpbz5jaGlsZHJlbjA8L1JhZGlvPlxuICAgICAgICA8UmFkaW8+Y2hpbGRyZW4xPC9SYWRpbz5cbiAgICAgIDwvR3JvdXA+XG4gICAgKVxuICAgIGNvbnN0IHdyYXBwZXIxID0gbW91bnQoXG4gICAgICA8R3JvdXAgZGVmYXVsdFZhbHVlPVwiY2hpbGRyZW4wXCIgb25DaGFuZ2U9e29uQ2hhbmdlfT5cbiAgICAgICAgPFJhZGlvPmNoaWxkcmVuMDwvUmFkaW8+XG4gICAgICAgIDxSYWRpbz5jaGlsZHJlbjE8L1JhZGlvPlxuICAgICAgPC9Hcm91cD5cbiAgICApXG4gICAgd3JhcHBlcjAuZmluZChcImxhYmVsXCIpLmF0KDApLnNpbXVsYXRlKFwiY2xpY2tcIilcbiAgICBleHBlY3Qob25DaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiY2hpbGRyZW4wXCIpXG4gICAgd3JhcHBlcjAuZmluZChcImxhYmVsXCIpLmF0KDEpLnNpbXVsYXRlKFwiY2xpY2tcIilcbiAgICBleHBlY3Qob25DaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiY2hpbGRyZW4xXCIpXG5cbiAgICBleHBlY3Qod3JhcHBlcjEuZmluZChcImRpdlwiKS5hdCgwKS5wcm9wcygpW1wiZGF0YS12YWx1ZVwiXSkudG9FcXVhbChcbiAgICAgIFwiY2hpbGRyZW4wXCJcbiAgICApXG4gICAgd3JhcHBlcjEuZmluZChcImxhYmVsXCIpLmF0KDEpLnNpbXVsYXRlKFwiY2xpY2tcIilcbiAgICBleHBlY3Qob25DaGFuZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFwiY2hpbGRyZW4xXCIpXG4gIH0pXG5cbiAgaXQoXCJHcm91cCDmmK/lkKbmraPnoa7lpITnkIYgdmFsdWUgU3RhdGVcIiwgKCkgPT4ge1xuICAgIC8vIOehruS/neS8mOWFiOWIpOaWrSBQcm9wIGRlZmF1bHRWYWx1Ze+8jOWmguaenOWtmOWcqOm7mOiupOWAvO+8jOWImSBHcm91cCDnirbmgIHkuLrmraTpu5jorqTlgLxcbiAgICBjb25zdCB3cmFwcGVyMSA9IG1vdW50KFxuICAgICAgPEdyb3VwIGRlZmF1bHRWYWx1ZT1cImNoaWxkcmVuMFwiPlxuICAgICAgICA8UmFkaW8gZGlzYWJsZWQ+Y2hpbGRyZW4wPC9SYWRpbz5cbiAgICAgICAgPFJhZGlvIHZhbHVlPXsyN30+Y2hpbGRyZW4xPC9SYWRpbz5cbiAgICAgICAgPFJhZGlvIGNoZWNrZWQgdmFsdWU9ezN9PlxuICAgICAgICAgIGNoaWxkcmVuMlxuICAgICAgICA8L1JhZGlvPlxuICAgICAgPC9Hcm91cD5cbiAgICApXG4gICAgZXhwZWN0KHdyYXBwZXIxLmZpbmQoXCJkaXZcIikuYXQoMCkucHJvcHMoKVtcImRhdGEtdmFsdWVcIl0pLnRvRXF1YWwoXG4gICAgICBcImNoaWxkcmVuMFwiXG4gICAgKVxuICAgIHdyYXBwZXIxLmZpbmQoXCJsYWJlbFwiKS5hdCgyKS5zaW11bGF0ZShcImNsaWNrXCIpXG4gICAgZXhwZWN0KHdyYXBwZXIxLmZpbmQoXCJkaXZcIikuYXQoMCkucHJvcHMoKVtcImRhdGEtdmFsdWVcIl0pLnRvRXF1YWwoMylcblxuICAgIC8vIOehruS/neacgOS8mOWFiOWIpOaWrSBQcm9wIHZhbHVl77yM5aaC5p6c5a2Y5ZyoIFByb3AgdmFsdWXvvIzliJkgR3JvdXAg5a6M5YWo5Lqk55Sx5aSW6YOo5o6n5Yi277yM5YaF6YOo54q25oCB5peg5pWI44CCXG4gICAgY29uc3Qgd3JhcHBlcjIgPSBtb3VudChcbiAgICAgIDxHcm91cCBkZWZhdWx0VmFsdWU9ezEyM30gdmFsdWU9ezI3fT5cbiAgICAgICAgPFJhZGlvIGRpc2FibGVkIHZhbHVlPXsxMjN9PlxuICAgICAgICAgIGNoaWxkcmVuMFxuICAgICAgICA8L1JhZGlvPlxuICAgICAgICA8UmFkaW8gdmFsdWU9ezI3fT5jaGlsZHJlbjE8L1JhZGlvPlxuICAgICAgICA8UmFkaW8gY2hlY2tlZCB2YWx1ZT17M30+XG4gICAgICAgICAgY2hpbGRyZW4yXG4gICAgICAgIDwvUmFkaW8+XG4gICAgICA8L0dyb3VwPlxuICAgIClcbiAgICBleHBlY3Qod3JhcHBlcjIuZmluZChcImRpdlwiKS5hdCgwKS5wcm9wcygpW1wiZGF0YS12YWx1ZVwiXSkudG9FcXVhbCgyNylcbiAgICB3cmFwcGVyMi5maW5kKFwibGFiZWxcIikuYXQoMikuc2ltdWxhdGUoXCJjbGlja1wiKVxuICAgIGV4cGVjdCh3cmFwcGVyMi5maW5kKFwiZGl2XCIpLmF0KDApLnByb3BzKClbXCJkYXRhLXZhbHVlXCJdKS50b0VxdWFsKDI3KVxuICB9KVxufSlcbiJdfQ==