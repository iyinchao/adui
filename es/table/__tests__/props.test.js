import * as React from 'react';
import { mount } from 'enzyme';
import TestRenderer from 'react-test-renderer';
import sinon from 'sinon';
import Table from '..';
var dataSource = [{
  "one": "阿萨德",
  "two": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "four": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "three": "阿萨德阿萨德阿萨德阿萨德阿萨德"
}, {
  "one": "阿萨德",
  "two": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "four": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "three": "阿萨德阿萨德阿萨德阿萨德阿萨德"
}, {
  "one": "阿萨德",
  "two": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "four": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "three": "阿萨德阿萨德阿萨德阿萨德阿萨德"
}, {
  "one": "阿萨德",
  "two": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "four": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "three": "阿萨德阿萨德阿萨德阿萨德阿萨德"
}, {
  "one": "阿萨德",
  "two": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "four": "阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德阿萨德",
  "three": "阿萨德阿萨德阿萨德阿萨德阿萨德"
}];
describe("Table", function () {
  beforeAll(function () {
    Element.prototype.getBoundingClientRect = jest.fn(function () {
      return {
        width: 500,
        height: 600,
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        x: 0,
        y: 0,
        toJSON: function toJSON() {}
      };
    });
  });
  it("headerAffixed 检测", function () {
    var wrapper = mount(React.createElement(Table, {
      dataSource: dataSource,
      headerAffixed: true
    }, React.createElement(Table.Column, {
      dataIndex: "one",
      title: "\u7B2C\u4E00\u9879",
      popover: "\u8868\u5934\u63D0\u793A\u5185\u5BB9",
      width: "100px",
      fixed: "left"
    }), React.createElement(Table.Column, {
      fixed: "right",
      dataIndex: "two",
      title: "\u7B2Cer\u9879",
      width: 300
    }), React.createElement(Table.Column, {
      dataIndex: "s",
      title: "\u7B2Csi\u9879",
      width: "10%",
      align: "center",
      render: function render() {
        return "这些撒大声地";
      }
    }), React.createElement(Table.Column, {
      dataIndex: "three",
      title: "\u7B2Csan\u9879"
    }), React.createElement(Table.Column, {
      dataIndex: "four",
      title: "\u7B2Csi\u9879",
      width: 300,
      align: "right"
    })));
    global.innerWidth = 500;
    global.dispatchEvent(new Event('resize'));
    global.dispatchEvent(new Event('scroll'));
    wrapper.instance().handleMainTableScroll();
    wrapper.instance().componentWillUnmount();
  });
  it("height 与 headerAffixed 不能同时使用 验证", function () {
    var stub = sinon.stub(console, 'error');
    mount(React.createElement(Table, {
      dataSource: dataSource,
      height: 500,
      headerAffixed: true
    }, React.createElement(Table.Column, {
      dataIndex: "one",
      title: "\u534A\u89D2\u62EC\u53F7\u5916(\u534A\u89D2\u62EC\u53F7\u5185\u6D4B\u8BD5)",
      popover: "\u8868\u5934\u63D0\u793A\u5185\u5BB9",
      width: 100,
      fixed: "left"
    })));
    expect(stub.calledOnce).toBe(true);
    stub.restore();
  });
  it("height 检测", function () {
    var wrapper = mount(React.createElement(Table, {
      dataSource: dataSource,
      height: 200
    }, React.createElement(Table.Column, {
      dataIndex: "one",
      title: "\u7B2C\u4E00\u9879",
      popover: "\u8868\u5934\u63D0\u793A\u5185\u5BB9",
      width: 100,
      fixed: "left"
    }), React.createElement(Table.Column, {
      fixed: "right",
      dataIndex: "two",
      title: "\u7B2Cer\u9879",
      width: 300
    }), React.createElement(Table.Column, {
      dataIndex: "s",
      title: "\u7B2Csi\u9879",
      width: 300,
      align: "center",
      render: function render() {
        return "这些撒大声地";
      }
    }), React.createElement(Table.Column, {
      dataIndex: "three",
      title: "\u7B2Csan\u9879"
    }), React.createElement(Table.Column, {
      dataIndex: "four",
      title: "\u7B2Csi\u9879",
      width: 300,
      align: "right"
    })));
    global.innerWidth = 500;
    global.innerHeight = 500;
    global.dispatchEvent(new Event('resize'));
    global.dispatchEvent(new Event('scroll'));
    wrapper.instance().handleMainTableScroll();
  });
  it("Column width 在 fixed 时必须设置 验证", function () {
    var stub = sinon.stub(console, 'error');
    mount(React.createElement(Table, {
      dataSource: dataSource
    }, React.createElement(Table.Column, {
      dataIndex: "one",
      title: "\u7B2C\u4E00\u9879",
      fixed: "left"
    })));
    expect(stub.calledOnce).toBe(true);
    stub.restore();
  });
  it("loading 快照", function () {
    var wrapper = TestRenderer.create(React.createElement(Table, {
      loading: true,
      dataSource: dataSource
    }, React.createElement(Table.Column, {
      dataIndex: "one",
      title: "\u7B2C\u4E00\u9879",
      fixed: "left"
    })));
    expect(wrapper).toMatchSnapshot();
  });
  it("合并单元格快照", function () {
    var wrapper = TestRenderer.create(React.createElement(Table, {
      dataSource: dataSource,
      getCellProps: function getCellProps(_, __, rowIndex, colIndex) {
        if (rowIndex === 0 && colIndex === 0) {
          return {
            rowSpan: 2,
            colSpan: 2
          };
        }

        if (rowIndex === 3 && colIndex === 2) {
          return {
            rowSpan: 2,
            colSpan: 1
          };
        }

        if (rowIndex === 3 && colIndex === 3) {
          return {
            rowSpan: 2,
            colSpan: 1
          };
        }

        if (rowIndex === 2 && colIndex === 0) {
          return {
            rowSpan: 1,
            colSpan: 1
          };
        }

        return {};
      }
    }, React.createElement(Table.Column, {
      dataIndex: "one",
      title: "\u7B2C\u4E00\u9879",
      fixed: true
    }), React.createElement(Table.Column, {
      dataIndex: "two",
      title: "\u7B2Cer\u9879",
      fixed: true
    }), React.createElement(Table.Column, {
      dataIndex: "three",
      title: "\u7B2C3\u9879",
      align: "center"
    }), React.createElement(Table.Column, {
      dataIndex: "four",
      title: "\u7B2C\u56DB\u9879",
      align: "center",
      fixed: "right"
    })));
    expect(wrapper).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,