function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from "react";
import PropTypes from "prop-types";
import Animate from "rc-animate";

var noop = function noop() {};

var MOTION_DURATION_BASE = 200;
var transitionNames = {
  slide: "slide-up",
  zoom: "zoom-motion",
  zoomHorizontal: "zoom-motion-horizontal"
};

var Motion = function Motion(_ref) {
  var afterLeave = _ref.afterLeave,
      animation = _ref.animation,
      _appear = _ref.appear,
      children = _ref.children,
      duration = _ref.duration,
      onLeave = _ref.onLeave,
      transition = _ref.transition,
      othersProps = _objectWithoutProperties(_ref, ["afterLeave", "animation", "appear", "children", "duration", "onLeave", "transition"]);

  var dur = duration !== null && duration !== undefined ? duration : MOTION_DURATION_BASE;
  var transitionName = transition && transitionNames[transition];

  var getNodeStyle = function getNodeStyle(node, styleName) {
    return getComputedStyle(node).getPropertyValue(styleName);
  };

  var setNodeStyle = function setNodeStyle(node) {
    if (node) {
      if (transitionName && transitionName.includes("horizontal")) {
        node.style.marginRight = "0";
        node.style.marginLeft = "0";
        node.style.paddingRight = "0";
        node.style.paddingLeft = "0";
        node.style.width = "0";
      } else {
        node.style.marginTop = "0";
        node.style.marginBottom = "0";
        node.style.paddingTop = "0";
        node.style.paddingBottom = "0";
        node.style.height = "0";
      }
    }
  };

  var getEnterAnimation = function getEnterAnimation(node, done) {
    var width = "".concat(node.getBoundingClientRect().width, "px");
    var height = "".concat(node.getBoundingClientRect().height, "px");
    var paddingTop = getNodeStyle(node, "padding-top");
    var paddingRight = getNodeStyle(node, "padding-right");
    var paddingBottom = getNodeStyle(node, "padding-bottom");
    var paddingLeft = getNodeStyle(node, "padding-left");

    if (transitionName && transitionName.includes("slide")) {
      node.style.opacity = "1";
    }

    if (transitionName && transitionName.includes("horizontal")) {
      node.style.width = "0";
      node.style.paddingRight = "0";
      node.style.paddingLeft = "0";
    } else {
      node.style.height = "0";
      node.style.paddingTop = "0";
      node.style.paddingBottom = "0";
    }

    node.style.overflow = "hidden";
    node.style.setProperty("animation-duration", "".concat(dur, "ms"), "important");
    node.classList.add("".concat(transitionName, "-enter"), "".concat(transitionName, "-enter-active"));
    setTimeout(function () {
      if (transitionName && transitionName.includes("horizontal")) {
        node.style.transition = "all ".concat(dur, "ms var(--ease-in-out)");
        node.style.width = width;
        node.style.paddingRight = paddingRight;
        node.style.paddingLeft = paddingLeft;
      } else {
        node.style.transition = "all ".concat(dur, "ms var(--ease-in-out)");
        node.style.height = height;
        node.style.paddingTop = paddingTop;
        node.style.paddingBottom = paddingBottom;
      }
    }, 10);
    var promise = new Promise(function (resolve) {
      return setTimeout(resolve, dur);
    });
    promise.then(function () {
      node.classList.remove("".concat(transitionName, "-enter"), "".concat(transitionName, "-enter-active"));

      if (transitionName && transitionName.includes("horizontal")) {
        node.style.width = "";
      } else {
        node.style.height = "";
      }

      node.style.overflow = "";
      return done();
    });
  };

  return React.createElement(Animate, _extends({
    animation: animation || {
      appear: function appear(node, done) {
        if (_appear) {
          getEnterAnimation(node, done);
        }

        return done();
      },
      enter: function enter(node, done) {
        getEnterAnimation(node, done);
      },
      leave: function leave(node, done) {
        if (onLeave) {
          onLeave(node);
        }

        if (transitionName && transitionName.includes("horizontal")) {
          var width = "".concat(node.getBoundingClientRect().width, "px");
          node.style.width = width;
        } else {
          var height = "".concat(node.getBoundingClientRect().height, "px");
          node.style.height = height;
        }

        node.style.setProperty("animation-duration", "".concat(dur, "ms"), "important");
        node.style.overflow = "hidden";
        node.classList.remove("".concat(transitionName, "-enter"), "".concat(transitionName, "-enter-active"));
        node.classList.add("".concat(transitionName, "-leave"), "".concat(transitionName, "-leave-active"));
        setTimeout(function () {
          node.style.transition = "all ".concat(dur, "ms var(--ease-in-out)");
          setNodeStyle(node);
        }, 10);
        var promise = new Promise(function (resolve) {
          return setTimeout(resolve, dur);
        });
        promise.then(function () {
          if (afterLeave) {
            afterLeave(node);
          }

          return done();
        });
      }
    }
  }, othersProps), children);
};

Motion.propTypes = {
  afterLeave: PropTypes.func,
  animation: PropTypes.object,
  appear: PropTypes.bool,
  children: PropTypes.node,
  duration: PropTypes.number,
  onLeave: PropTypes.func,
  transition: PropTypes.oneOf(["slide", "zoom", "zoomHorizontal"])
};
Motion.defaultProps = {
  afterLeave: noop,
  animation: undefined,
  appear: false,
  children: null,
  duration: undefined,
  onLeave: noop,
  transition: "zoom"
};
export default Motion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,