import * as React from "react";
import PropTypes from "prop-types";
import { DateUtils } from "day-picker-react";
import "./style";
import Button from "../button";
import { areSameMonth, getDefaultMaxDate, getDefaultMinDate } from "./core";
var prefix = "adui-date";

var Navbar = function Navbar(_ref) {
  var maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      month = _ref.month,
      nextMonth = _ref.nextMonth,
      onNextClick = _ref.onNextClick,
      onPreviousClick = _ref.onPreviousClick,
      onManuallyChangeMonth = _ref.onManuallyChangeMonth;
  return React.createElement("div", {
    className: "".concat(prefix, "-navBar")
  }, React.createElement(Button, {
    className: "".concat(prefix, "-navButtonPrev"),
    leftIcon: "arrow-down",
    theme: "light",
    size: "small",
    onClick: function onClick() {
      onPreviousClick();
    },
    disabled: areSameMonth(minDate, month) || DateUtils.isDayBefore(month, minDate)
  }), React.createElement(Button, {
    className: "".concat(prefix, "-navButtonNext"),
    leftIcon: "arrow-down",
    theme: "light",
    size: "small",
    onClick: function onClick() {
      if (DateUtils.isDayBefore(month, minDate) && onManuallyChangeMonth) {
        onManuallyChangeMonth();
      }

      onNextClick();
    },
    disabled: areSameMonth(maxDate, month) || DateUtils.isDayAfter(nextMonth, maxDate)
  }));
};

Navbar.propTypes = {
  maxDate: PropTypes.any,
  minDate: PropTypes.any,
  month: PropTypes.instanceOf(Date),
  nextMonth: PropTypes.instanceOf(Date),
  onNextClick: PropTypes.any,
  onPreviousClick: PropTypes.any,
  onManuallyChangeMonth: PropTypes.any
};
Navbar.defaultProps = {
  maxDate: getDefaultMaxDate(),
  minDate: getDefaultMinDate(),
  month: null,
  nextMonth: null,
  onNextClick: function onNextClick() {},
  onPreviousClick: function onPreviousClick() {},
  onManuallyChangeMonth: function onManuallyChangeMonth() {}
};
export default Navbar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvZGF0ZS1waWNrZXIvTmF2YmFyLnRzeCJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsIkRhdGVVdGlscyIsIkJ1dHRvbiIsImFyZVNhbWVNb250aCIsImdldERlZmF1bHRNYXhEYXRlIiwiZ2V0RGVmYXVsdE1pbkRhdGUiLCJwcmVmaXgiLCJOYXZiYXIiLCJtYXhEYXRlIiwibWluRGF0ZSIsIm1vbnRoIiwibmV4dE1vbnRoIiwib25OZXh0Q2xpY2siLCJvblByZXZpb3VzQ2xpY2siLCJvbk1hbnVhbGx5Q2hhbmdlTW9udGgiLCJpc0RheUJlZm9yZSIsImlzRGF5QWZ0ZXIiLCJwcm9wVHlwZXMiLCJhbnkiLCJpbnN0YW5jZU9mIiwiRGF0ZSIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLQSxLQUFaLE1BQXVCLE9BQXZCO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLFNBQVQsUUFBMEIsa0JBQTFCO0FBQ0EsT0FBTyxTQUFQO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixXQUFuQjtBQUNBLFNBQVNDLFlBQVQsRUFBdUJDLGlCQUF2QixFQUEwQ0MsaUJBQTFDLFFBQW1FLFFBQW5FO0FBRUEsSUFBTUMsTUFBTSxHQUFHLFdBQWY7O0FBZ0JBLElBQU1DLE1BQThCLEdBQUcsU0FBakNBLE1BQWlDO0FBQUEsTUFDckNDLE9BRHFDLFFBQ3JDQSxPQURxQztBQUFBLE1BRXJDQyxPQUZxQyxRQUVyQ0EsT0FGcUM7QUFBQSxNQUdyQ0MsS0FIcUMsUUFHckNBLEtBSHFDO0FBQUEsTUFJckNDLFNBSnFDLFFBSXJDQSxTQUpxQztBQUFBLE1BS3JDQyxXQUxxQyxRQUtyQ0EsV0FMcUM7QUFBQSxNQU1yQ0MsZUFOcUMsUUFNckNBLGVBTnFDO0FBQUEsTUFPckNDLHFCQVBxQyxRQU9yQ0EscUJBUHFDO0FBQUEsU0FTckM7QUFBSyxJQUFBLFNBQVMsWUFBS1IsTUFBTDtBQUFkLEtBQ0Usb0JBQUMsTUFBRDtBQUNFLElBQUEsU0FBUyxZQUFLQSxNQUFMLG1CQURYO0FBRUUsSUFBQSxRQUFRLEVBQUMsWUFGWDtBQUdFLElBQUEsS0FBSyxFQUFDLE9BSFI7QUFJRSxJQUFBLElBQUksRUFBQyxPQUpQO0FBS0UsSUFBQSxPQUFPLEVBQUUsbUJBQU07QUFDYk8sTUFBQUEsZUFBZTtBQUNoQixLQVBIO0FBUUUsSUFBQSxRQUFRLEVBQ05WLFlBQVksQ0FBQ00sT0FBRCxFQUFVQyxLQUFWLENBQVosSUFBZ0NULFNBQVMsQ0FBQ2MsV0FBVixDQUFzQkwsS0FBdEIsRUFBNkJELE9BQTdCO0FBVHBDLElBREYsRUFhRSxvQkFBQyxNQUFEO0FBQ0UsSUFBQSxTQUFTLFlBQUtILE1BQUwsbUJBRFg7QUFFRSxJQUFBLFFBQVEsRUFBQyxZQUZYO0FBR0UsSUFBQSxLQUFLLEVBQUMsT0FIUjtBQUlFLElBQUEsSUFBSSxFQUFDLE9BSlA7QUFLRSxJQUFBLE9BQU8sRUFBRSxtQkFBTTtBQUNiLFVBQUlMLFNBQVMsQ0FBQ2MsV0FBVixDQUFzQkwsS0FBdEIsRUFBNkJELE9BQTdCLEtBQXlDSyxxQkFBN0MsRUFBb0U7QUFDbEVBLFFBQUFBLHFCQUFxQjtBQUN0Qjs7QUFDREYsTUFBQUEsV0FBVztBQUNaLEtBVkg7QUFXRSxJQUFBLFFBQVEsRUFDTlQsWUFBWSxDQUFDSyxPQUFELEVBQVVFLEtBQVYsQ0FBWixJQUFnQ1QsU0FBUyxDQUFDZSxVQUFWLENBQXFCTCxTQUFyQixFQUFnQ0gsT0FBaEM7QUFacEMsSUFiRixDQVRxQztBQUFBLENBQXZDOztBQXdDQUQsTUFBTSxDQUFDVSxTQUFQLEdBQW1CO0FBSWpCVCxFQUFBQSxPQUFPLEVBQUVSLFNBQVMsQ0FBQ2tCLEdBSkY7QUFRakJULEVBQUFBLE9BQU8sRUFBRVQsU0FBUyxDQUFDa0IsR0FSRjtBQVlqQlIsRUFBQUEsS0FBSyxFQUFFVixTQUFTLENBQUNtQixVQUFWLENBQXFCQyxJQUFyQixDQVpVO0FBZ0JqQlQsRUFBQUEsU0FBUyxFQUFFWCxTQUFTLENBQUNtQixVQUFWLENBQXFCQyxJQUFyQixDQWhCTTtBQW9CakJSLEVBQUFBLFdBQVcsRUFBRVosU0FBUyxDQUFDa0IsR0FwQk47QUF3QmpCTCxFQUFBQSxlQUFlLEVBQUViLFNBQVMsQ0FBQ2tCLEdBeEJWO0FBNEJqQkosRUFBQUEscUJBQXFCLEVBQUVkLFNBQVMsQ0FBQ2tCO0FBNUJoQixDQUFuQjtBQStCQVgsTUFBTSxDQUFDYyxZQUFQLEdBQXNCO0FBQ3BCYixFQUFBQSxPQUFPLEVBQUVKLGlCQUFpQixFQUROO0FBRXBCSyxFQUFBQSxPQUFPLEVBQUVKLGlCQUFpQixFQUZOO0FBR3BCSyxFQUFBQSxLQUFLLEVBQUUsSUFIYTtBQUlwQkMsRUFBQUEsU0FBUyxFQUFFLElBSlM7QUFLcEJDLEVBQUFBLFdBQVcsRUFBRSx1QkFBTSxDQUFFLENBTEQ7QUFNcEJDLEVBQUFBLGVBQWUsRUFBRSwyQkFBTSxDQUFFLENBTkw7QUFPcEJDLEVBQUFBLHFCQUFxQixFQUFFLGlDQUFNLENBQUU7QUFQWCxDQUF0QjtBQVVBLGVBQWVQLE1BQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIlxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiXG5pbXBvcnQgeyBEYXRlVXRpbHMgfSBmcm9tIFwiZGF5LXBpY2tlci1yZWFjdFwiXG5pbXBvcnQgXCIuL3N0eWxlXCJcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL2J1dHRvblwiXG5pbXBvcnQgeyBhcmVTYW1lTW9udGgsIGdldERlZmF1bHRNYXhEYXRlLCBnZXREZWZhdWx0TWluRGF0ZSB9IGZyb20gXCIuL2NvcmVcIlxuXG5jb25zdCBwcmVmaXggPSBcImFkdWktZGF0ZVwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU5hdmJhclByb3BzIHtcbiAgW2tleTogc3RyaW5nXTogYW55XG4gIG1heERhdGU6IERhdGVcbiAgbWluRGF0ZTogRGF0ZVxuICBtb250aDogRGF0ZSB8IG51bGxcbiAgbmV4dE1vbnRoOiBEYXRlIHwgbnVsbFxuICBvbk5leHRDbGljazogKCkgPT4gdm9pZFxuICBvblByZXZpb3VzQ2xpY2s6ICgpID0+IHZvaWRcbiAgb25NYW51YWxseUNoYW5nZU1vbnRoPzogKCkgPT4gdm9pZFxufVxuXG4vKipcbiAqIOaXpeacn+mAieaLqSBOYXZiYXJcbiAqL1xuY29uc3QgTmF2YmFyOiBSZWFjdC5GQzxJTmF2YmFyUHJvcHM+ID0gKHtcbiAgbWF4RGF0ZSxcbiAgbWluRGF0ZSxcbiAgbW9udGgsXG4gIG5leHRNb250aCxcbiAgb25OZXh0Q2xpY2ssXG4gIG9uUHJldmlvdXNDbGljayxcbiAgb25NYW51YWxseUNoYW5nZU1vbnRoLFxufTogSU5hdmJhclByb3BzKSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPXtgJHtwcmVmaXh9LW5hdkJhcmB9PlxuICAgIDxCdXR0b25cbiAgICAgIGNsYXNzTmFtZT17YCR7cHJlZml4fS1uYXZCdXR0b25QcmV2YH1cbiAgICAgIGxlZnRJY29uPVwiYXJyb3ctZG93blwiXG4gICAgICB0aGVtZT1cImxpZ2h0XCJcbiAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIG9uUHJldmlvdXNDbGljaygpXG4gICAgICB9fVxuICAgICAgZGlzYWJsZWQ9e1xuICAgICAgICBhcmVTYW1lTW9udGgobWluRGF0ZSwgbW9udGgpIHx8IERhdGVVdGlscy5pc0RheUJlZm9yZShtb250aCwgbWluRGF0ZSlcbiAgICAgIH1cbiAgICAvPlxuICAgIDxCdXR0b25cbiAgICAgIGNsYXNzTmFtZT17YCR7cHJlZml4fS1uYXZCdXR0b25OZXh0YH1cbiAgICAgIGxlZnRJY29uPVwiYXJyb3ctZG93blwiXG4gICAgICB0aGVtZT1cImxpZ2h0XCJcbiAgICAgIHNpemU9XCJzbWFsbFwiXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlVXRpbHMuaXNEYXlCZWZvcmUobW9udGgsIG1pbkRhdGUpICYmIG9uTWFudWFsbHlDaGFuZ2VNb250aCkge1xuICAgICAgICAgIG9uTWFudWFsbHlDaGFuZ2VNb250aCgpXG4gICAgICAgIH1cbiAgICAgICAgb25OZXh0Q2xpY2soKVxuICAgICAgfX1cbiAgICAgIGRpc2FibGVkPXtcbiAgICAgICAgYXJlU2FtZU1vbnRoKG1heERhdGUsIG1vbnRoKSB8fCBEYXRlVXRpbHMuaXNEYXlBZnRlcihuZXh0TW9udGgsIG1heERhdGUpXG4gICAgICB9XG4gICAgLz5cbiAgPC9kaXY+XG4pXG5cbk5hdmJhci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiDmnIDlpKfpmZDliLbml6XmnJ9cbiAgICovXG4gIG1heERhdGU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiDmnIDlsI/pmZDliLbml6XmnJ9cbiAgICovXG4gIG1pbkRhdGU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiDlvZPliY3mnIjnmoTml6XmnJ9cbiAgICovXG4gIG1vbnRoOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgLyoqXG4gICAqIOS4i+S4quaciOeahOaXpeacn1xuICAgKi9cbiAgbmV4dE1vbnRoOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihEYXRlKSxcbiAgLyoqXG4gICAqIG5leHQgY2xpY2sgaGFuZGxlclxuICAgKi9cbiAgb25OZXh0Q2xpY2s6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBwcmV2aW91cyBjbGljayBoYW5kbGVyXG4gICAqL1xuICBvblByZXZpb3VzQ2xpY2s6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBwcmV2aW91cyBjbGljayBoYW5kbGVyXG4gICAqL1xuICBvbk1hbnVhbGx5Q2hhbmdlTW9udGg6IFByb3BUeXBlcy5hbnksXG59XG5cbk5hdmJhci5kZWZhdWx0UHJvcHMgPSB7XG4gIG1heERhdGU6IGdldERlZmF1bHRNYXhEYXRlKCksXG4gIG1pbkRhdGU6IGdldERlZmF1bHRNaW5EYXRlKCksXG4gIG1vbnRoOiBudWxsLFxuICBuZXh0TW9udGg6IG51bGwsXG4gIG9uTmV4dENsaWNrOiAoKSA9PiB7fSxcbiAgb25QcmV2aW91c0NsaWNrOiAoKSA9PiB7fSxcbiAgb25NYW51YWxseUNoYW5nZU1vbnRoOiAoKSA9PiB7fSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmF2YmFyXG4iXX0=