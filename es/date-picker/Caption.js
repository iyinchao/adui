import * as React from "react";
import PropTypes from "prop-types";
import "./style";
import Icon from "../icon";
import { getDefaultMaxDate, getDefaultMinDate } from "./core";
var prefix = "adui-date";

var Caption = function Caption(_ref) {
  var date = _ref.date,
      maxDate = _ref.maxDate,
      minDate = _ref.minDate,
      onDateChange = _ref.onDateChange;

  var handleYearChange = function handleYearChange(e) {
    var newYear = parseInt(e.currentTarget.value, 10);
    var newDate = new Date(date.getTime());
    newDate.setFullYear(newYear);
    onDateChange(newDate, e);
  };

  var handleMonthChange = function handleMonthChange(e) {
    var newMonth = parseInt(e.currentTarget.value, 10);
    var newDate = new Date(date.getTime());
    newDate.setMonth(newMonth);
    onDateChange(newDate, e);
  };

  var minYear = minDate.getFullYear();
  var maxYear = maxDate.getFullYear();
  var years = [maxYear];

  for (var year = maxYear - 1; year >= minYear; year -= 1) {
    years.push(year);
  }

  var displayMonth = date.getMonth();
  var displayYear = date.getFullYear();
  var startMonth = displayYear === minYear ? minDate.getMonth() : 0;
  var endMonth = displayYear === maxYear ? maxDate.getMonth() + 1 : 12;
  var months = [startMonth];

  for (var month = startMonth + 1; month < endMonth; month += 1) {
    months.push(month);
  }

  return React.createElement("div", {
    className: "".concat(prefix, "-caption")
  }, React.createElement("div", {
    className: "".concat(prefix, "-selects")
  }, React.createElement("div", {
    className: "".concat(prefix, "-selectYear")
  }, React.createElement("select", {
    name: "year",
    onChange: handleYearChange,
    value: displayYear
  }, years.map(function (year) {
    return React.createElement("option", {
      key: year,
      value: year
    }, year, "\u5E74");
  })), React.createElement(Icon, {
    icon: "triangle-down"
  })), React.createElement("div", {
    className: "".concat(prefix, "-selectMonth")
  }, React.createElement("select", {
    name: "month",
    onChange: handleMonthChange,
    value: displayMonth
  }, months.map(function (month) {
    return React.createElement("option", {
      key: month,
      value: month
    }, month + 1, "\u6708");
  })), React.createElement(Icon, {
    icon: "triangle-down"
  }))));
};

Caption.propTypes = {
  date: PropTypes.any,
  maxDate: PropTypes.any,
  minDate: PropTypes.any,
  onDateChange: PropTypes.func.isRequired
};
Caption.defaultProps = {
  date: new Date(),
  maxDate: getDefaultMaxDate(),
  minDate: getDefaultMinDate()
};
export default Caption;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,