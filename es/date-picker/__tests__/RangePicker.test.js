function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component } from "react";
import { mount } from "enzyme";
import TestRenderer from "react-test-renderer";
import DatePicker from "..";
import { convertDateRangeToString } from "../core";
import { act } from "react-dom/test-utils";
var RangePicker = DatePicker.RangePicker;

var RangePickerMounter = function (_Component) {
  _inherits(RangePickerMounter, _Component);

  var _super = _createSuper(RangePickerMounter);

  function RangePickerMounter() {
    var _this;

    _classCallCheck(this, RangePickerMounter);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      component: null,
      value: [new Date(), new Date()],
      visible: true
    };
    return _this;
  }

  _createClass(RangePickerMounter, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state = this.state,
          value = _this$state.value,
          visible = _this$state.visible;
      return React.createElement(RangePicker, _extends({
        shortcuts: [{
          label: "祖国生日",
          value: [new Date("2020-10-01"), new Date("2020-10-07")]
        }],
        ref: function ref(component) {
          if (!_this2.state.component) {
            _this2.setState({
              component: component
            });
          }
        },
        closeOnSelect: true,
        value: value,
        visible: visible,
        onChange: function onChange(val) {
          return _this2.setState({
            value: val
          });
        },
        onVisibleChange: function onVisibleChange(bool) {
          return _this2.setState({
            visible: bool
          });
        }
      }, this.props));
    }
  }]);

  return RangePickerMounter;
}(Component);

describe("RangePicker", function () {
  beforeAll(function () {
    jest.useFakeTimers();
  });
  afterAll(function () {
    jest.useRealTimers();
  });
  it("是否正确渲染", function () {
    var wrapper = TestRenderer.create(React.createElement(RangePicker, null));
    expect(wrapper).toMatchSnapshot();
  });
  it("内部驱动", function () {
    var val = [new Date("2020-02-02"), new Date("2020-03-01")];
    var wrapper = mount(React.createElement(RangePicker, {
      defaultValue: val,
      defaultVisible: false,
      closeOnSelect: true
    }));
    expect(wrapper.find("input").at(0).props().value).toBe(convertDateRangeToString(val));
    wrapper.find("input").simulate("focus");
    expect(wrapper.find("Popover").at(0).props().visible).toBe(true);
    wrapper.find("input").simulate("change", {
      target: {
        value: ""
      }
    });
    expect(wrapper.find("input").props().value).toBe("");
    wrapper.find("input").simulate("change", {
      target: {
        value: "2020-02-22 - 2020-02-28"
      }
    });
    expect(wrapper.find("input").props().value).toBe("2020-02-22 - 2020-02-28");
    act(function () {
      wrapper.find("input").simulate("keydown", {
        key: "enter",
        keyCode: 13
      });
      jest.runAllTimers();
      wrapper.update();
      expect(wrapper.find("Popover").at(0).props().visible).toBe(false);
    });
    act(function () {
      wrapper.find(".adui-date-day").at(14).simulate("click");
      wrapper.find(".adui-date-day").at(15).simulate("click");
      var expectedVal = convertDateRangeToString([new Date(wrapper.find(".adui-date-day").at(14).props()["aria-label"] + " 12:00"), new Date(wrapper.find(".adui-date-day").at(15).props()["aria-label"] + " 12:00")]);
      jest.advanceTimersByTime(350);
      wrapper.update();
      expect(wrapper.find("Popover").at(0).props().visible).toBe(false);
    });
  });
  it("外部控制", function () {
    var val = [new Date(), new Date()];
    var wrapper = mount(React.createElement(RangePicker, {
      value: [new Date(), new Date()],
      visible: true,
      closeOnSelect: true
    }));
    expect(wrapper.find("input").at(0).props().value).toBe(convertDateRangeToString(val));
    expect(wrapper.find("Popover").at(0).props().visible).toBe(true);
    act(function () {
      wrapper.find(".adui-date-day").at(14).simulate("click");
      wrapper.find(".adui-date-day").at(15).simulate("click");
      jest.advanceTimersByTime(350);
      wrapper.update();
      expect(wrapper.find("input").at(0).props().value).toBe(convertDateRangeToString(val));
    });
    act(function () {
      wrapper.find(".adui-date-day").at(15).simulate("click");
      wrapper.find(".adui-date-day").at(16).simulate("click");
      jest.advanceTimersByTime(350);
      wrapper.update();
      expect(wrapper.find("input").at(0).props().value).toBe(convertDateRangeToString(val));
      expect(wrapper.find("Popover").at(0).props().visible).toBe(true);
    });
    var mounter = mount(React.createElement(RangePickerMounter, null));
    var today = convertDateRangeToString(new Date());
    mounter.find("input").simulate("change", {
      target: {
        value: "2020-02-22 - 2020-02-26"
      }
    });
    expect(convertDateRangeToString(mounter.state().value)).toBe("2020-02-22 - 2020-02-26");
    mounter.find("input").simulate("change", {
      target: {
        value: "2020-02-25 - 2020-02-26"
      }
    });
    expect(convertDateRangeToString(mounter.state().value)).toBe("2020-02-25 - 2020-02-26");
    mounter.find("input").simulate("change", {
      target: {
        value: ""
      }
    });
    expect(convertDateRangeToString(mounter.state().value)).toBe("");
    expect(mounter.find("Popover").at(0).props().visible).toBe(true);
    act(function () {
      mounter.find(".adui-date-day").at(15).simulate("click");
      mounter.find(".adui-date-day").at(16).simulate("click");
      jest.runAllTimers();
      mounter.update();
    });
  });
  it("DayPicker 操作", function () {
    var today = new Date();
    var wrapper = mount(React.createElement(RangePickerMounter, null));
    var expectedRange = [];
    act(function () {
      wrapper.find(".adui-date-day").at(10).simulate("click");
      expectedRange[0] = new Date(wrapper.find(".adui-date-day").at(10).props()["aria-label"] + " 12:00");
      wrapper.find("button").at(1).simulate("click");
      wrapper.find("button").at(1).simulate("click");
      jest.runAllTimers();
      wrapper.update();
    });
    act(function () {
      wrapper.find(".adui-date-day").at(10).simulate("click");
      expectedRange[1] = new Date(wrapper.find(".adui-date-day").at(10).props()["aria-label"] + " 12:00");
      jest.runAllTimers();
      wrapper.update();
      expect(convertDateRangeToString(wrapper.state().value) === convertDateRangeToString(expectedRange)).toBe(true);
    });
    act(function () {
      wrapper.find(".adui-date-shortcut").at(0).simulate("keydown", {
        key: "enter",
        keyCode: 13
      });
      jest.runAllTimers();
      wrapper.update();
      expect(convertDateRangeToString(wrapper.state().value)).toBe("2020-10-01 - 2020-10-07");
    });
    var wrapperForCoverage0 = mount(React.createElement(RangePickerMounter, {
      disabled: true
    }));
    wrapperForCoverage0.state().component.handleVisibleChange(false);
    wrapperForCoverage0.find(".adui-date-day").at(14).simulate("mouseenter");
    wrapperForCoverage0.find(".adui-date-day").at(14).simulate("mouseleave");
    jest.runAllTimers();
  });
  it("测试 min max", function () {
    var wrapper = mount(React.createElement(RangePickerMounter, {
      minDate: new Date("2018-12-31"),
      maxDate: new Date("2020-01-01")
    }));
    act(function () {
      wrapper.find("select").at(0).simulate("change", {
        target: {
          value: "2019"
        }
      });
      wrapper.find("select").at(1).simulate("change", {
        target: {
          value: "1"
        }
      });
      jest.runAllTimers();
      wrapper.update();
      wrapper.find(".adui-date-day").at(14).simulate("click");
      jest.runAllTimers();
      wrapper.update();
      wrapper.find("select").at(1).simulate("change", {
        target: {
          value: "11"
        }
      });
      wrapper.find("select").at(0).simulate("change", {
        target: {
          value: "2020"
        }
      });
      jest.runAllTimers();
      wrapper.update();
      wrapper.find(".adui-date-day").at(14).simulate("click");
      jest.runAllTimers();
      wrapper.update();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,