import * as React from "react";
import { mount } from "enzyme";
import Select from "..";
var Option = Select.Option;
describe("Select", function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it("Select 是否正确渲染", function () {
    var wrapper = mount(React.createElement(Select, null));
    expect(wrapper).toMatchSnapshot();
  });
  it("Select 是否能内部驱动", function () {
    var wrapper = mount(React.createElement(Select, {
      defaultOpen: true,
      defaultValue: 2,
      style: {
        width: "120px"
      }
    }, React.createElement(Option, {
      value: 1
    }, "\u670B\u53CB\u5708"), React.createElement(Option, {
      value: 2
    }, "\u516C\u4F17\u53F7")));
    var dropdownWrapper = mount(wrapper.find("Trigger").instance().getComponent());
    expect(dropdownWrapper.props().visible).toBe(true);
    dropdownWrapper.find(".adui-select-item-option").at(0).simulate("click");
    dropdownWrapper = mount(wrapper.find("Trigger").instance().getComponent());
    expect(wrapper.state().value).toBe(1);
    expect(dropdownWrapper.props().visible).toBe(false);
  });
  it("Select 是否受外部控制", function () {
    var onSelect = jest.fn();
    var wrapper = mount(React.createElement(Select, {
      open: true,
      value: 2,
      style: {
        width: "120px"
      },
      onSelect: onSelect
    }, React.createElement(Option, {
      value: 1
    }, "\u670B\u53CB\u5708"), React.createElement(Option, {
      value: 2
    }, "\u516C\u4F17\u53F7")));
    var dropdownWrapper = mount(wrapper.find("Trigger").instance().getComponent());
    expect(wrapper.state().value).toBe(2);
    expect(dropdownWrapper.props().visible).toBe(true);
    dropdownWrapper.find(".adui-select-item-option").at(0).simulate("click");
    dropdownWrapper = mount(wrapper.find("Trigger").instance().getComponent());
    expect(wrapper.state().value).toBe(2);
    expect(dropdownWrapper.props().visible).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,