function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from "react";
import PropTypes from "prop-types";
import Trigger from "rc-trigger";
import { builtinPlacements } from "./builtinPlacements";
import "./style";
var PopTrigger = forwardRef(function (_ref, ref) {
  var children = _ref.children,
      popup = _ref.popup,
      popupVisible = _ref.popupVisible,
      otherProps = _objectWithoutProperties(_ref, ["children", "popup", "popupVisible"]);

  var visibleProp = {};

  if (popupVisible !== null) {
    visibleProp.popupVisible = popupVisible;
  }

  return React.createElement(Trigger, _extends({
    ref: ref,
    popup: typeof popup === "string" ? React.createElement("div", null, popup) : popup
  }, visibleProp, otherProps), typeof children === "string" ? React.createElement("span", null, children) : children);
});
PopTrigger.displayName = "PopTrigger";
PopTrigger.propTypes = {
  action: PropTypes.any,
  builtinPlacements: PropTypes.object,
  children: PropTypes.node,
  defaultPopupVisible: PropTypes.bool,
  destroyPopupOnHide: PropTypes.bool,
  getPopupContainer: PropTypes.func,
  mouseEnterDelay: PropTypes.number,
  mouseLeaveDelay: PropTypes.number,
  popup: PropTypes.node.isRequired,
  popupAlign: PropTypes.object,
  popupClassName: PropTypes.string,
  popupPlacement: PropTypes.oneOf(["top", "left", "right", "bottom", "topLeft", "topRight", "bottomLeft", "bottomRight", "leftTop", "leftBottom", "rightTop", "rightBottom"]),
  popupStyle: PropTypes.object,
  popupTransitionName: PropTypes.string,
  popupVisible: PropTypes.oneOf([null, true, false])
};
PopTrigger.defaultProps = {
  action: ["hover"],
  builtinPlacements: builtinPlacements,
  children: "",
  defaultPopupVisible: false,
  destroyPopupOnHide: false,
  getPopupContainer: null,
  mouseEnterDelay: 0,
  mouseLeaveDelay: 0.1,
  popupAlign: null,
  popupClassName: "",
  popupPlacement: "bottom",
  popupStyle: null,
  popupTransitionName: undefined,
  popupVisible: null
};
export default PopTrigger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvcG9wLXRyaWdnZXIvUG9wVHJpZ2dlci50c3giXSwibmFtZXMiOlsiUmVhY3QiLCJmb3J3YXJkUmVmIiwiUHJvcFR5cGVzIiwiVHJpZ2dlciIsImJ1aWx0aW5QbGFjZW1lbnRzIiwiUG9wVHJpZ2dlciIsInJlZiIsImNoaWxkcmVuIiwicG9wdXAiLCJwb3B1cFZpc2libGUiLCJvdGhlclByb3BzIiwidmlzaWJsZVByb3AiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsImFjdGlvbiIsImFueSIsIm9iamVjdCIsIm5vZGUiLCJkZWZhdWx0UG9wdXBWaXNpYmxlIiwiYm9vbCIsImRlc3Ryb3lQb3B1cE9uSGlkZSIsImdldFBvcHVwQ29udGFpbmVyIiwiZnVuYyIsIm1vdXNlRW50ZXJEZWxheSIsIm51bWJlciIsIm1vdXNlTGVhdmVEZWxheSIsImlzUmVxdWlyZWQiLCJwb3B1cEFsaWduIiwicG9wdXBDbGFzc05hbWUiLCJzdHJpbmciLCJwb3B1cFBsYWNlbWVudCIsIm9uZU9mIiwicG9wdXBTdHlsZSIsInBvcHVwVHJhbnNpdGlvbk5hbWUiLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLFVBQWhCLFFBQWtDLE9BQWxDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsWUFBcEI7QUFDQSxTQUFTQyxpQkFBVCxRQUFrQyxxQkFBbEM7QUFDQSxPQUFPLFNBQVA7QUEyREEsSUFBTUMsVUFFTCxHQUFHSixVQUFVLENBQ1osZ0JBQXFFSyxHQUFyRSxFQUE2RTtBQUFBLE1BQTFFQyxRQUEwRSxRQUExRUEsUUFBMEU7QUFBQSxNQUFoRUMsS0FBZ0UsUUFBaEVBLEtBQWdFO0FBQUEsTUFBekRDLFlBQXlELFFBQXpEQSxZQUF5RDtBQUFBLE1BQXhDQyxVQUF3Qzs7QUFDM0UsTUFBTUMsV0FBcUIsR0FBRyxFQUE5Qjs7QUFF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cnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCJcbmltcG9ydCBUcmlnZ2VyIGZyb20gXCJyYy10cmlnZ2VyXCJcbmltcG9ydCB7IGJ1aWx0aW5QbGFjZW1lbnRzIH0gZnJvbSBcIi4vYnVpbHRpblBsYWNlbWVudHNcIlxuaW1wb3J0IFwiLi9zdHlsZVwiXG5cbmludGVyZmFjZSBJVmlzaWJsZSB7XG4gIHBvcHVwVmlzaWJsZT86IGJvb2xlYW5cbn1cblxuaW50ZXJmYWNlIElCYXNlT2JqZWN0IHtcbiAgW2tleTogc3RyaW5nXTogYW55XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRyaWdnZXIge1xuICBmb3JjZVBvcHVwQWxpZ24/OiAoKSA9PiB2b2lkXG4gIGdldFJvb3REb21Ob2RlPzogKCkgPT4gSFRNTEVsZW1lbnRcbn1cblxuZXhwb3J0IHR5cGUgUGxhY2VtZW50ID1cbiAgfCBcImJvdHRvbVwiXG4gIHwgXCJib3R0b21MZWZ0XCJcbiAgfCBcImJvdHRvbVJpZ2h0XCJcbiAgfCBcImxlZnRcIlxuICB8IFwibGVmdEJvdHRvbVwiXG4gIHwgXCJsZWZ0VG9wXCJcbiAgfCBcInJpZ2h0XCJcbiAgfCBcInJpZ2h0Qm90dG9tXCJcbiAgfCBcInJpZ2h0VG9wXCJcbiAgfCBcInRvcFwiXG4gIHwgXCJ0b3BMZWZ0XCJcbiAgfCBcInRvcFJpZ2h0XCJcblxuZXhwb3J0IGludGVyZmFjZSBJUG9wVHJpZ2dlclByb3BzIHtcbiAgW2tleTogc3RyaW5nXTogYW55XG4gIGFjdGlvbj86IHN0cmluZ1tdXG4gIGJ1aWx0aW5QbGFjZW1lbnRzPzogb2JqZWN0XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlXG4gIGRlZmF1bHRQb3B1cFZpc2libGU/OiBudWxsIHwgYm9vbGVhblxuICBkZXN0cm95UG9wdXBPbkhpZGU/OiBib29sZWFuXG4gIGdldFBvcHVwQ29udGFpbmVyPzogbnVsbCB8ICgobm9kZTogSFRNTEVsZW1lbnQpID0+IEhUTUxFbGVtZW50KVxuICBtb3VzZUVudGVyRGVsYXk/OiBudW1iZXJcbiAgbW91c2VMZWF2ZURlbGF5PzogbnVtYmVyXG4gIG9uUG9wdXBBbGlnbjogKG5vZGU6IEhUTUxFbGVtZW50LCBhbGlnbj86IElCYXNlT2JqZWN0KSA9PiB2b2lkXG4gIG9uUG9wdXBWaXNpYmxlQ2hhbmdlOiAodmlzaWJsZTogYm9vbGVhbikgPT4gdm9pZFxuICBwb3B1cDogUmVhY3QuUmVhY3ROb2RlXG4gIHBvcHVwQWxpZ24/OiBudWxsIHwgb2JqZWN0XG4gIHBvcHVwQ2xhc3NOYW1lPzogc3RyaW5nXG4gIHBvcHVwUGxhY2VtZW50PzogUGxhY2VtZW50XG4gIHBvcHVwU3R5bGU/OiBudWxsIHwgUmVhY3QuQ1NTUHJvcGVydGllc1xuICBwb3B1cFRyYW5zaXRpb25OYW1lPzogc3RyaW5nXG4gIHBvcHVwVmlzaWJsZT86IG51bGwgfCBib29sZWFuXG4gIHpJbmRleD86IFJlYWN0LlJlYWN0Tm9kZVxufVxuXG4vKipcbiAqIOW8ueWHuuihjOS4uuOAglxuICpcbiAqIFBvcFRyaWdnZXIg5piv5Z+65LqOIHJjLXRyaWdnZXIgKE1JVCBMaWNlbnNlKSDov5vooYzlsIHoo4XnmoTjgIJcbiAqIFBvcFRyaWdnZXIg55qE5a6a5L2N5piv5oq96LGh55qE5by55Ye66KGM5Li644CCXG4gKiBQb3BUcmlnZ2VyIOW6lOaPkOS+m+aJgOacieW8ueWHuuebuOWFs+eahOiDveWKm+S4jumFjee9ru+8jOS+myBUb29sdGlw44CBU2VsZWN0IOetieiwg+eUqOOAglxuICogUG9wVHJpZ2dlciDkuZ/lj6/ku6Xooqvkvb/nlKjogIXnm7TmjqXkvb/nlKjvvIzlrp7njrDoh6rlrprnmoTlvLnlh7rlip/og73jgIJcbiAqL1xuY29uc3QgUG9wVHJpZ2dlcjogUmVhY3QuRm9yd2FyZFJlZkV4b3RpY0NvbXBvbmVudDxcbiAgSVBvcFRyaWdnZXJQcm9wcyAmIFJlYWN0LlJlZkF0dHJpYnV0ZXM8YW55PlxuPiA9IGZvcndhcmRSZWYoXG4gICh7IGNoaWxkcmVuLCBwb3B1cCwgcG9wdXBWaXNpYmxlLCAuLi5vdGhlclByb3BzIH06IElQb3BUcmlnZ2VyUHJvcHMsIHJlZikgPT4ge1xuICAgIGNvbnN0IHZpc2libGVQcm9wOiBJVmlzaWJsZSA9IHt9XG5cbiAgICBpZiAocG9wdXBWaXNpYmxlICE9PSBudWxsKSB7XG4gICAgICB2aXNpYmxlUHJvcC5wb3B1cFZpc2libGUgPSBwb3B1cFZpc2libGVcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRyaWdnZXJcbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIHBvcHVwPXt0eXBlb2YgcG9wdXAgPT09IFwic3RyaW5nXCIgPyA8ZGl2Pntwb3B1cH08L2Rpdj4gOiBwb3B1cH1cbiAgICAgICAgey4uLnZpc2libGVQcm9wfVxuICAgICAgICB7Li4ub3RoZXJQcm9wc31cbiAgICAgID5cbiAgICAgICAge3R5cGVvZiBjaGlsZHJlbiA9PT0gXCJzdHJpbmdcIiA/IDxzcGFuPntjaGlsZHJlbn08L3NwYW4+IDogY2hpbGRyZW59XG4gICAgICA8L1RyaWdnZXI+XG4gICAgKVxuICB9XG4pXG5cblBvcFRyaWdnZXIuZGlzcGxheU5hbWUgPSBcIlBvcFRyaWdnZXJcIlxuXG5Qb3BUcmlnZ2VyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIOinpuWPkeaWueW8j1xuICAgKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICog6aKE6K6+5L2N572u77yM6ZyA6KaB5YyF5ZCrIHBvcHVwUGxhY2VtZW50IOeahCAxMiDkuKrkvY3nva5cbiAgICovXG4gIGJ1aWx0aW5QbGFjZW1lbnRzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICog5a2Q6IqC54K5XG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiDlvLnlh7rmoYbmmK/lkKbpu5jorqTmmL7npLpcbiAgICovXG4gIGRlZmF1bHRQb3B1cFZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICog5by55Ye65qGG5piv5ZCm5Zyo5raI5aSx5pe256e75Ye6IGRvbVxuICAgKi9cbiAgZGVzdHJveVBvcHVwT25IaWRlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIOaMh+WumuW8ueWHuuahhueahOeItue6p++8jOm7mOiupOS4uiBkb2N1bWVudFxuICAgKi9cbiAgZ2V0UG9wdXBDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogbW91c2VFbnRlciDmmL7npLrnmoTlu7bml7bvvIzljZXkvY3vvJpz77yM5Y+q5ZyoIGFjdGlvbj1bXCJob3ZlclwiXSDml7bmnInmlYhcbiAgICovXG4gIG1vdXNlRW50ZXJEZWxheTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIG1vdXNlTGVhdmUg5raI5aSx55qE5bu25pe277yM5Y2V5L2N77yac++8jOWPquWcqCBhY3Rpb249W1wiaG92ZXJcIl0g5pe25pyJ5pWIXG4gICAqL1xuICBtb3VzZUxlYXZlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiDlvLnlh7rlhoXlrrlcbiAgICovXG4gIHBvcHVwOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICog5by55Ye65bGC55qE5L2N572u5o6n5Yi277yMQVBJIOivt+WPguiAgyBodHRwczovL2dpdGh1Yi5jb20veWltaW5naGUvZG9tLWFsaWduXG4gICAqL1xuICBwb3B1cEFsaWduOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICog5by55Ye65qGG55qE6ZmE5Yqg57G75ZCNXG4gICAqL1xuICBwb3B1cENsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIOW8ueWHuuWxguS9jee9ru+8jOS5n+WPr+S7peS4jeS9v+eUqOi/meS6m+mihOiuvuS9jee9ru+8jOS9v+eUqCBwb3B1cEFsaWduIOWxnuaAp+OAglxuICAgKiDpobXpnaLlnKjlvLnlh7rmlrnlkJHkuIrml6Dms5Xmu5rliqjml7bkvJrlvoDlj6blpJbkuIDkuKrmlrnlkJHlvLnlh7rvvIzkv53or4HmnInnqbrpl7Tljrvmu5rliqjnnIvliLDjgIJcbiAgICog5aaC6K6+572u5LqGIHBvcHVwUGxhY2VtZW50PVwiYm90dG9tXCLvvIzkvYblhYPntKDlt7Lnu4/kvY3kuo7pobXpnaLlupXpg6jml7bvvIxwb3B1cCDliJnkvJrlj5jkuLogdG9w44CCXG4gICAqIOWboOS4uuaciSBUcmlnZ2VyIOeahOi/meS4quKAneS/neivgeacieepuumXtOWOu+a7muWKqOeci+WIsOKAnOeahOiuvuiuoemAu+i+ke+8jOaJgOS7peS4jeiAg+iZkeWBmumhtemdoua7muWKqOaXtueahOiHquWKqOWPmOaNoiBwb3B1cFBsYWNlbWVudOOAglxuICAgKi9cbiAgcG9wdXBQbGFjZW1lbnQ6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgXCJ0b3BcIixcbiAgICBcImxlZnRcIixcbiAgICBcInJpZ2h0XCIsXG4gICAgXCJib3R0b21cIixcbiAgICBcInRvcExlZnRcIixcbiAgICBcInRvcFJpZ2h0XCIsXG4gICAgXCJib3R0b21MZWZ0XCIsXG4gICAgXCJib3R0b21SaWdodFwiLFxuICAgIFwibGVmdFRvcFwiLFxuICAgIFwibGVmdEJvdHRvbVwiLFxuICAgIFwicmlnaHRUb3BcIixcbiAgICBcInJpZ2h0Qm90dG9tXCIsXG4gIF0pLFxuICAvKipcbiAgICog5by55Ye65qGG55qE6ZmE5Yqg5qC35byPXG4gICAqL1xuICBwb3B1cFN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICog5by55Ye65qGG55qE5Yqo55S757G75ZCN77yM5Yqo55S75qC85byP6YG15b6qIHJjLWFuaW1hdGVcbiAgICovXG4gIHBvcHVwVHJhbnNpdGlvbk5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiDlvLnlh7rmoYbmmK/lkKbmmL7npLpcbiAgICovXG4gIHBvcHVwVmlzaWJsZTogUHJvcFR5cGVzLm9uZU9mKFtudWxsLCB0cnVlLCBmYWxzZV0pLFxufVxuXG5Qb3BUcmlnZ2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aW9uOiBbXCJob3ZlclwiXSxcbiAgYnVpbHRpblBsYWNlbWVudHMsXG4gIGNoaWxkcmVuOiBcIlwiLFxuICBkZWZhdWx0UG9wdXBWaXNpYmxlOiBmYWxzZSxcbiAgZGVzdHJveVBvcHVwT25IaWRlOiBmYWxzZSxcbiAgZ2V0UG9wdXBDb250YWluZXI6IG51bGwsXG4gIG1vdXNlRW50ZXJEZWxheTogMCxcbiAgbW91c2VMZWF2ZURlbGF5OiAwLjEsXG4gIHBvcHVwQWxpZ246IG51bGwsXG4gIHBvcHVwQ2xhc3NOYW1lOiBcIlwiLFxuICBwb3B1cFBsYWNlbWVudDogXCJib3R0b21cIixcbiAgcG9wdXBTdHlsZTogbnVsbCxcbiAgcG9wdXBUcmFuc2l0aW9uTmFtZTogdW5kZWZpbmVkLFxuICBwb3B1cFZpc2libGU6IG51bGwsXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvcFRyaWdnZXJcbiJdfQ==