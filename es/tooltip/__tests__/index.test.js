import * as React from "react";
import { act } from "react-dom/test-utils";
import { mount } from "enzyme";
import Tooltip from "..";
describe("Tooltip", function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it("是否能内部驱动", function () {
    var wrapper = mount(React.createElement(Tooltip, {
      alignEdge: true,
      placement: "top",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0,
      popup: React.createElement("div", {
        id: "popup"
      }, "popup")
    }, React.createElement("div", {
      id: "children"
    }, "children")));
    var child = wrapper.find("#children").at(0);
    child.simulate("mouseenter");
    expect(wrapper.find("Trigger").at(0).props().popupVisible).toBe(true);
    child.simulate("mouseleave");
    expect(wrapper.find("Trigger").at(0).props().popupVisible).toBe(false);
  });
});
describe("Tooltip 测试 handlePopupAlign - Top", function () {
  beforeEach(function () {
    jest.useFakeTimers();
    Element.prototype.getBoundingClientRect = jest.fn(function () {
      return {
        width: 120,
        height: 120,
        top: -10,
        left: 0,
        bottom: 0,
        right: 0,
        x: 0,
        y: -10,
        toJSON: function toJSON() {}
      };
    });
  });
  it("是否处理 PopupAlign", function () {
    document.body.innerHTML = '<div id="mounter" />';
    var wrapper = mount(React.createElement(Tooltip, {
      test: true,
      visible: true,
      placement: "top",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0,
      popup: "popup"
    }, React.createElement("div", {
      id: "children"
    }, "children")), {
      attachTo: document.getElementById("mounter")
    });
    document.body.scrollTop = 0;
    var child = wrapper.find("#children").at(0);
    act(function () {
      child.simulate("mouseenter");
      jest.runAllTimers();
      wrapper.update();
    });
    expect(wrapper.find("PopTrigger").at(0).props().popupPlacement).toBe("bottom");
  });
});
describe("Tooltip 测试 handlePopupAlign - Bottom", function () {
  beforeEach(function () {
    jest.useFakeTimers();
    Element.prototype.getBoundingClientRect = jest.fn(function () {
      return {
        width: 120,
        height: 120,
        top: 1000,
        left: 0,
        bottom: 0,
        right: 0,
        x: 0,
        y: 1000,
        toJSON: function toJSON() {}
      };
    });
  });
  it("是否处理 PopupAlign", function () {
    document.body.innerHTML = '<div id="mounter" />';
    var wrapper = mount(React.createElement(Tooltip, {
      test: true,
      visible: true,
      placement: "bottom",
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0,
      popup: "popup"
    }, React.createElement("div", {
      id: "children"
    }, "children")), {
      attachTo: document.getElementById("mounter")
    });
    document.body.scrollTop = 0;
    var child = wrapper.find("#children").at(0);
    act(function () {
      child.simulate("mouseenter");
      jest.runAllTimers();
      wrapper.update();
    });
    expect(wrapper.find("PopTrigger").at(0).props().popupPlacement).toBe("top");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,