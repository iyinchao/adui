import { builtinPlacements } from "../pop-trigger/builtinPlacements";
var targetOffset = [0, 0];
var arrowWidth = 5;
var horizontalArrowShift = 16;
var verticalArrowShift = 8;
var placements = {
  bottom: {
    offset: [0, 2],
    points: ["tc", "bc"],
    targetOffset: targetOffset
  },
  bottomLeft: {
    offset: [-(horizontalArrowShift + arrowWidth), 2],
    points: ["tl", "bc"],
    targetOffset: targetOffset
  },
  bottomRight: {
    offset: [horizontalArrowShift + arrowWidth, 2],
    points: ["tr", "bc"],
    targetOffset: targetOffset
  },
  left: {
    offset: [-2, 0],
    points: ["cr", "cl"],
    targetOffset: targetOffset
  },
  leftBottom: {
    offset: [-2, verticalArrowShift + arrowWidth],
    points: ["br", "cl"],
    targetOffset: targetOffset
  },
  leftTop: {
    offset: [-2, -(verticalArrowShift + arrowWidth)],
    points: ["tr", "cl"],
    targetOffset: targetOffset
  },
  right: {
    offset: [2, 0],
    points: ["cl", "cr"],
    targetOffset: targetOffset
  },
  rightBottom: {
    offset: [2, verticalArrowShift + arrowWidth],
    points: ["bl", "cr"],
    targetOffset: targetOffset
  },
  rightTop: {
    offset: [2, -(verticalArrowShift + arrowWidth)],
    points: ["tl", "cr"],
    targetOffset: targetOffset
  },
  top: {
    offset: [0, -2],
    points: ["bc", "tc"],
    targetOffset: targetOffset
  },
  topLeft: {
    offset: [-(horizontalArrowShift + arrowWidth), -2],
    points: ["bl", "tc"],
    targetOffset: targetOffset
  },
  topRight: {
    offset: [horizontalArrowShift + arrowWidth, -2],
    points: ["br", "tc"],
    targetOffset: targetOffset
  }
};

var getPlacements = function getPlacements(options) {
  var toReturn = options && options.alignEdge ? builtinPlacements : placements;

  if (options && options.autoAdjustPlacement) {
    toReturn.overflow = {
      adjustX: 1,
      adjustY: 1
    };
  } else {
    toReturn.overflow = {
      adjustX: 0,
      adjustY: 0
    };
  }

  return toReturn;
};

export default getPlacements;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvbXBvbmVudHMvdG9vbHRpcC9wbGFjZW1lbnRzLnRzIl0sIm5hbWVzIjpbImJ1aWx0aW5QbGFjZW1lbnRzIiwidGFyZ2V0T2Zmc2V0IiwiYXJyb3dXaWR0aCIsImhvcml6b250YWxBcnJvd1NoaWZ0IiwidmVydGljYWxBcnJvd1NoaWZ0IiwicGxhY2VtZW50cyIsImJvdHRvbSIsIm9mZnNldCIsInBvaW50cyIsImJvdHRvbUxlZnQiLCJib3R0b21SaWdodCIsImxlZnQiLCJsZWZ0Qm90dG9tIiwibGVmdFRvcCIsInJpZ2h0IiwicmlnaHRCb3R0b20iLCJyaWdodFRvcCIsInRvcCIsInRvcExlZnQiLCJ0b3BSaWdodCIsImdldFBsYWNlbWVudHMiLCJvcHRpb25zIiwidG9SZXR1cm4iLCJhbGlnbkVkZ2UiLCJhdXRvQWRqdXN0UGxhY2VtZW50Iiwib3ZlcmZsb3ciLCJhZGp1c3RYIiwiYWRqdXN0WSJdLCJtYXBwaW5ncyI6IkFBT0EsU0FBU0EsaUJBQVQsUUFBa0Msa0NBQWxDO0FBT0EsSUFBTUMsWUFBWSxHQUFHLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBckI7QUFDQSxJQUFNQyxVQUFVLEdBQUcsQ0FBbkI7QUFDQSxJQUFNQyxvQkFBb0IsR0FBRyxFQUE3QjtBQUNBLElBQU1DLGtCQUFrQixHQUFHLENBQTNCO0FBRUEsSUFBTUMsVUFBVSxHQUFHO0FBQ2pCQyxFQUFBQSxNQUFNLEVBQUU7QUFDTkMsSUFBQUEsTUFBTSxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FERjtBQUVOQyxJQUFBQSxNQUFNLEVBQUUsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUZGO0FBR05QLElBQUFBLFlBQVksRUFBWkE7QUFITSxHQURTO0FBTWpCUSxFQUFBQSxVQUFVLEVBQUU7QUFDVkYsSUFBQUEsTUFBTSxFQUFFLENBQUMsRUFBRUosb0JBQW9CLEdBQUdELFVBQXpCLENBQUQsRUFBdUMsQ0FBdkMsQ0FERTtBQUVWTSxJQUFBQSxNQUFNLEVBQUUsQ0FBQyxJQUFE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O0FBQ25ELE1BQU1DLFFBQWEsR0FDakJELE9BQU8sSUFBSUEsT0FBTyxDQUFDRSxTQUFuQixHQUErQnZCLGlCQUEvQixHQUFtREssVUFEckQ7O0FBR0EsTUFBSWdCLE9BQU8sSUFBSUEsT0FBTyxDQUFDRyxtQkFBdkIsRUFBNEM7QUFDMUNGLElBQUFBLFFBQVEsQ0FBQ0csUUFBVCxHQUFvQjtBQUNsQkMsTUFBQUEsT0FBTyxFQUFFLENBRFM7QUFFbEJDLE1BQUFBLE9BQU8sRUFBRTtBQUZTLEtBQXBCO0FBSUQsR0FMRCxNQUtPO0FBQ0xMLElBQUFBLFFBQVEsQ0FBQ0csUUFBVCxHQUFvQjtBQUNsQkMsTUFBQUEsT0FBTyxFQUFFLENBRFM7QUFFbEJDLE1BQUFBLE9BQU8sRUFBRTtBQUZTLEtBQXBCO0FBSUQ7O0FBQ0QsU0FBT0wsUUFBUDtBQUNELENBaEJEOztBQWtCQSxlQUFlRixhQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUb29sdGlwIHBsYWNlbWVudCDkuI4gUG9wVHJpZ2dlciBidWlsdGluUGxhY2VtZW50cyDnmoTljLrliKvvvJpcbiAqXG4gKiBQb3BUcmlnZ2VyIOm7mOiupOaMh+WumueahOaYr+W8ueWHuuahhueahOi+uee8mOS4juWFg+e0oOeahOi+uee8mOWvuem9kO+8m1xuICogVG9vbHRpcCDlpKfpg6jliIbmg4XlhrXkuI3pnIDopoHovrnnvJjlr7npvZDvvIzpnIDopoHnmoTmmK/lvLnlh7rmoYbnmoTnrq3lpLTmjIflkJHlhYPntKDmraPkuK3pl7TjgIJcbiAqIOiAjOWfuuS6jiBUb29sdGlwIOWwgeijheeahCBQb3BvdmVyIOm7mOiupOS9v+eUqOi+uee8mOWvuem9kO+8jOW9k+eEtuS5n+WPr+mAmui/hyBwcm9wIOaUueWPmOatpOeJueaAp+OAglxuICovXG5pbXBvcnQgeyBidWlsdGluUGxhY2VtZW50cyB9IGZyb20gXCIuLi9wb3AtdHJpZ2dlci9idWlsdGluUGxhY2VtZW50c1wiXG5cbmludGVyZmFjZSBJUGxhY2VtZW50T3B0aW9uIHtcbiAgYWxpZ25FZGdlPzogYm9vbGVhblxuICBhdXRvQWRqdXN0UGxhY2VtZW50PzogYm9vbGVhblxufVxuXG5jb25zdCB0YXJnZXRPZmZzZXQgPSBbMCwgMF1cbmNvbnN0IGFycm93V2lkdGggPSA1XG5jb25zdCBob3Jpem9udGFsQXJyb3dTaGlmdCA9IDE2XG5jb25zdCB2ZXJ0aWNhbEFycm93U2hpZnQgPSA4XG5cbmNvbnN0IHBsYWNlbWVudHMgPSB7XG4gIGJvdHRvbToge1xuICAgIG9mZnNldDogWzAsIDJdLFxuICAgIHBvaW50czogW1widGNcIiwgXCJiY1wiXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIGJvdHRvbUxlZnQ6IHtcbiAgICBvZmZzZXQ6IFstKGhvcml6b250YWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aCksIDJdLFxuICAgIHBvaW50czogW1widGxcIiwgXCJiY1wiXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIGJvdHRvbVJpZ2h0OiB7XG4gICAgb2Zmc2V0OiBbaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoLCAyXSxcbiAgICBwb2ludHM6IFtcInRyXCIsIFwiYmNcIl0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICBsZWZ0OiB7XG4gICAgb2Zmc2V0OiBbLTIsIDBdLFxuICAgIHBvaW50czogW1wiY3JcIiwgXCJjbFwiXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIGxlZnRCb3R0b206IHtcbiAgICBvZmZzZXQ6IFstMiwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF0sXG4gICAgcG9pbnRzOiBbXCJiclwiLCBcImNsXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgbGVmdFRvcDoge1xuICAgIG9mZnNldDogWy0yLCAtKHZlcnRpY2FsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpXSxcbiAgICBwb2ludHM6IFtcInRyXCIsIFwiY2xcIl0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICByaWdodDoge1xuICAgIG9mZnNldDogWzIsIDBdLFxuICAgIHBvaW50czogW1wiY2xcIiwgXCJjclwiXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIHJpZ2h0Qm90dG9tOiB7XG4gICAgb2Zmc2V0OiBbMiwgdmVydGljYWxBcnJvd1NoaWZ0ICsgYXJyb3dXaWR0aF0sXG4gICAgcG9pbnRzOiBbXCJibFwiLCBcImNyXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgcmlnaHRUb3A6IHtcbiAgICBvZmZzZXQ6IFsyLCAtKHZlcnRpY2FsQXJyb3dTaGlmdCArIGFycm93V2lkdGgpXSxcbiAgICBwb2ludHM6IFtcInRsXCIsIFwiY3JcIl0sXG4gICAgdGFyZ2V0T2Zmc2V0LFxuICB9LFxuICB0b3A6IHtcbiAgICBvZmZzZXQ6IFswLCAtMl0sXG4gICAgcG9pbnRzOiBbXCJiY1wiLCBcInRjXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbiAgdG9wTGVmdDoge1xuICAgIG9mZnNldDogWy0oaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoKSwgLTJdLFxuICAgIHBvaW50czogW1wiYmxcIiwgXCJ0Y1wiXSxcbiAgICB0YXJnZXRPZmZzZXQsXG4gIH0sXG4gIHRvcFJpZ2h0OiB7XG4gICAgb2Zmc2V0OiBbaG9yaXpvbnRhbEFycm93U2hpZnQgKyBhcnJvd1dpZHRoLCAtMl0sXG4gICAgcG9pbnRzOiBbXCJiclwiLCBcInRjXCJdLFxuICAgIHRhcmdldE9mZnNldCxcbiAgfSxcbn1cblxuY29uc3QgZ2V0UGxhY2VtZW50cyA9IChvcHRpb25zOiBJUGxhY2VtZW50T3B0aW9uKSA9PiB7XG4gIGNvbnN0IHRvUmV0dXJuOiBhbnkgPVxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5hbGlnbkVkZ2UgPyBidWlsdGluUGxhY2VtZW50cyA6IHBsYWNlbWVudHNcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmF1dG9BZGp1c3RQbGFjZW1lbnQpIHtcbiAgICB0b1JldHVybi5vdmVyZmxvdyA9IHtcbiAgICAgIGFkanVzdFg6IDEsXG4gICAgICBhZGp1c3RZOiAxLFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b1JldHVybi5vdmVyZmxvdyA9IHtcbiAgICAgIGFkanVzdFg6IDAsXG4gICAgICBhZGp1c3RZOiAwLFxuICAgIH1cbiAgfVxuICByZXR1cm4gdG9SZXR1cm5cbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UGxhY2VtZW50c1xuIl19